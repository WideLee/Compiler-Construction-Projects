
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 31 23:49:47 CST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import callgraph.*;
import exceptions.*;
import java.util.*;
import java.util.Map.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 31 23:49:47 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\133\002\000\002\002\013\000\002\002" +
    "\004\000\002\002\006\000\002\003\002\000\002\134\002" +
    "\000\002\003\005\000\002\135\002\000\002\004\007\000" +
    "\002\005\002\000\002\005\004\000\002\005\004\000\002" +
    "\006\002\000\002\006\003\000\002\007\004\000\002\007" +
    "\003\000\002\010\006\000\002\011\002\000\002\011\004" +
    "\000\002\011\004\000\002\012\002\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\006\000\002" +
    "\015\002\000\002\015\004\000\002\015\004\000\002\016" +
    "\002\000\002\016\003\000\002\017\004\000\002\017\003" +
    "\000\002\020\006\000\002\021\002\000\002\021\003\000" +
    "\002\022\004\000\002\022\003\000\002\023\004\000\002" +
    "\136\002\000\002\137\002\000\002\024\010\000\002\025" +
    "\005\000\002\026\002\000\002\026\003\000\002\027\004" +
    "\000\002\030\005\000\002\031\002\000\002\031\003\000" +
    "\002\032\003\000\002\140\002\000\002\141\002\000\002" +
    "\033\007\000\002\033\004\000\002\034\002\000\002\034" +
    "\003\000\002\035\004\000\002\036\002\000\002\036\003" +
    "\000\002\037\004\000\002\037\003\000\002\040\004\000" +
    "\002\041\006\000\002\042\002\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\006\000\002\045\002" +
    "\000\002\045\003\000\002\046\004\000\002\046\003\000" +
    "\002\047\004\000\002\050\002\000\002\050\003\000\002" +
    "\051\005\000\002\052\006\000\002\052\006\000\002\052" +
    "\006\000\002\052\006\000\002\052\006\000\002\053\004" +
    "\000\002\054\002\000\002\054\003\000\002\055\004\000" +
    "\002\055\003\000\002\056\004\000\002\057\004\000\002" +
    "\057\004\000\002\060\002\000\002\060\003\000\002\061" +
    "\004\000\002\061\003\000\002\062\004\000\002\063\002" +
    "\000\002\063\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\142\002\000\002" +
    "\143\002\000\002\065\011\000\002\144\002\000\002\145" +
    "\002\000\002\066\013\000\002\067\002\000\002\067\003" +
    "\000\002\070\004\000\002\070\003\000\002\146\002\000" +
    "\002\071\007\000\002\072\002\000\002\072\003\000\002" +
    "\073\004\000\002\074\004\000\002\075\002\000\002\075" +
    "\003\000\002\076\005\000\002\076\004\000\002\076\005" +
    "\000\002\077\002\000\002\077\003\000\002\100\004\000" +
    "\002\101\002\000\002\101\003\000\002\102\004\000\002" +
    "\102\003\000\002\103\004\000\002\104\005\000\002\105" +
    "\004\000\002\105\004\000\002\106\002\000\002\106\003" +
    "\000\002\107\004\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\111\005\000\002\111\004\000\002\112" +
    "\002\000\002\112\003\000\002\113\004\000\002\113\003" +
    "\000\002\113\005\000\002\114\003\000\002\114\003\000" +
    "\002\115\004\000\002\116\004\000\002\117\002\000\002" +
    "\117\003\000\002\117\003\000\002\120\003\000\002\120" +
    "\003\000\002\121\003\000\002\122\004\000\002\122\004" +
    "\000\002\123\002\000\002\123\003\000\002\124\004\000" +
    "\002\124\003\000\002\125\004\000\002\125\004\000\002" +
    "\126\003\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\127\003\000\002\127\003\000\002\127\005" +
    "\000\002\127\004\000\002\127\005\000\002\130\003\000" +
    "\002\147\002\000\002\130\005\000\002\131\004\000\002" +
    "\131\003\000\002\132\004\000\002\132\005\000\002\132" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\004\004\001\002\000\004\027\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\010\052\011\001\002\000\004\005\u0102\001" +
    "\002\000\016\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\001\002\000\016\005\ufff8\006\ufff8\007\225\010" +
    "\ufff8\011\ufff8\012\ufff8\001\002\000\006\005\001\006\001" +
    "\001\002\000\006\005\016\006\ufffd\001\002\000\004\006" +
    "\222\001\002\000\016\003\ufffc\006\ufffc\016\ufffc\020\ufffc" +
    "\027\ufffc\052\ufffc\001\002\000\016\003\026\006\uffa1\016" +
    "\020\020\024\027\027\052\uffa1\001\002\000\046\003\uff67" +
    "\024\065\025\uff67\026\uff67\027\uff67\030\055\031\047\032" +
    "\uff67\033\064\034\050\035\062\036\051\037\052\040\053" +
    "\041\uff67\042\uff67\047\uff67\060\uff67\001\002\000\012\006" +
    "\uff9f\022\uff9f\023\uff9f\052\uff9f\001\002\000\012\006\uffa0" +
    "\022\uffa0\023\uffa0\052\uffa0\001\002\000\004\043\212\001" +
    "\002\000\046\003\uff67\024\065\025\uff67\026\uff67\027\uff67" +
    "\030\055\031\047\032\uff67\033\064\034\050\035\062\036" +
    "\051\037\052\040\053\041\uff67\042\uff67\047\uff67\060\uff67" +
    "\001\002\000\012\006\uffa6\022\uffa6\023\uffa6\052\164\001" +
    "\002\000\004\052\160\001\002\000\024\003\034\006\uff8b" +
    "\022\uff8b\023\uff8b\043\uff50\044\uff4f\045\uff4f\047\037\052" +
    "\uff8b\001\002\000\012\006\uff9e\022\uff9e\023\uff9e\052\uff9e" +
    "\001\002\000\012\006\uff9c\022\uff9c\023\uff9c\052\uff9c\001" +
    "\002\000\012\006\uff9d\022\uff9d\023\uff9d\052\uff9d\001\002" +
    "\000\004\006\ufffb\001\002\000\050\003\uff67\024\065\025" +
    "\uff67\026\uff67\027\uff67\030\055\031\047\032\uff67\033\064" +
    "\034\050\035\062\036\051\037\052\040\053\041\uff67\042" +
    "\uff67\047\uff67\050\uff86\060\uff67\001\002\000\012\006\uff8a" +
    "\022\uff8a\023\uff8a\052\uff8a\001\002\000\012\006\uff8c\022" +
    "\uff8c\023\uff8c\052\uff8c\001\002\000\060\003\uff67\006\uff86" +
    "\022\uff86\023\uff86\024\065\025\uff67\026\uff67\027\uff67\030" +
    "\055\031\047\032\uff67\033\064\034\050\035\062\036\051" +
    "\037\052\040\053\041\uff67\042\uff67\047\uff67\050\uff86\052" +
    "\uff86\060\uff67\001\002\000\006\044\044\045\041\001\002" +
    "\000\046\003\uff67\024\065\025\uff67\026\uff67\027\uff67\030" +
    "\055\031\047\032\uff67\033\064\034\050\035\062\036\051" +
    "\037\052\040\053\041\uff67\042\uff67\047\uff67\060\uff67\001" +
    "\002\000\072\003\uff4e\006\uff4e\015\uff4e\017\uff4e\021\uff4e" +
    "\022\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e\030\uff4e\031" +
    "\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\043\uff4e\044\044\045\041\046\uff4e\050" +
    "\uff4e\052\uff4e\053\uff4e\060\uff4e\001\002\000\072\003\uff4c" +
    "\006\uff4c\015\uff4c\017\uff4c\021\uff4c\022\uff4c\023\uff4c\024" +
    "\uff4c\025\uff4c\026\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c" +
    "\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\043" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\050\uff4c\052\uff4c\053\uff4c" +
    "\060\uff4c\001\002\000\004\027\045\001\002\000\072\003" +
    "\uff4b\006\uff4b\015\uff4b\017\uff4b\021\uff4b\022\uff4b\023\uff4b" +
    "\024\uff4b\025\uff4b\026\uff4b\030\uff4b\031\uff4b\032\uff4b\033" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\046\uff4b\050\uff4b\052\uff4b\053" +
    "\uff4b\060\uff4b\001\002\000\072\003\uff4d\006\uff4d\015\uff4d" +
    "\017\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026" +
    "\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d" +
    "\036\uff4d\037\uff4d\040\uff4d\041\uff4d\043\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\050\uff4d\052\uff4d\053\uff4d\060\uff4d\001\002" +
    "\000\024\003\uff65\025\uff65\026\uff65\027\uff65\032\uff65\041" +
    "\uff65\042\uff65\047\uff65\060\uff65\001\002\000\032\003\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\041\uff73\042\uff73\047\uff73\060\uff73\001\002\000\032" +
    "\003\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031" +
    "\uff75\032\uff75\041\uff75\042\uff75\047\uff75\060\uff75\001\002" +
    "\000\032\003\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\031\uff77\032\uff77\041\uff77\042\uff77\047\uff77\060\uff77" +
    "\001\002\000\032\003\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\041\uff78\042\uff78\047\uff78" +
    "\060\uff78\001\002\000\024\003\uff5f\025\100\026\074\027" +
    "\104\032\106\041\070\042\105\047\103\060\072\001\002" +
    "\000\024\003\uff66\025\uff66\026\uff66\027\uff66\032\uff66\041" +
    "\uff66\042\uff66\047\uff66\060\uff66\001\002\000\004\003\125" +
    "\001\002\000\004\003\124\001\002\000\006\003\122\046" +
    "\123\001\002\000\044\003\uff7b\006\uff7b\015\uff7b\017\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\033\064\034\050\035\062\036" +
    "\051\037\052\040\053\046\uff7b\050\uff7b\052\uff7b\053\uff7b" +
    "\001\002\000\032\003\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\041\uff76\042\uff76\047\uff76" +
    "\060\uff76\001\002\000\024\003\uff5f\025\100\026\074\027" +
    "\104\032\106\041\070\042\105\047\103\060\072\001\002" +
    "\000\032\003\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030" +
    "\uff74\031\uff74\032\uff74\041\uff74\042\uff74\047\uff74\060\uff74" +
    "\001\002\000\024\003\uff62\025\uff62\026\uff62\027\uff62\032" +
    "\uff62\041\uff62\042\uff62\047\uff62\060\uff62\001\002\000\032" +
    "\003\uff67\024\065\025\uff67\026\uff67\027\uff67\030\055\031" +
    "\047\032\uff67\041\uff67\042\uff67\047\uff67\060\uff67\001\002" +
    "\000\030\003\uff79\006\uff79\015\uff79\017\uff79\021\uff79\022" +
    "\uff79\023\uff79\046\uff79\050\uff79\052\uff79\053\uff79\001\002" +
    "\000\014\003\uff56\027\uff56\042\uff56\047\uff56\060\uff56\001" +
    "\002\000\004\003\117\001\002\000\064\003\uff54\006\uff54" +
    "\015\uff54\017\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025" +
    "\uff54\026\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034\uff54" +
    "\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54\046\uff54\050" +
    "\uff54\052\uff54\053\uff54\060\uff54\001\002\000\052\003\uff68" +
    "\006\uff68\015\uff68\017\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\030\uff68\031\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\037\uff68\040\uff68\046\uff68\050\uff68\052\uff68\053\uff68\001" +
    "\002\000\014\003\uff57\027\uff57\042\uff57\047\uff57\060\uff57" +
    "\001\002\000\064\003\uff55\006\uff55\015\uff55\017\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\030\uff55" +
    "\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037" +
    "\uff55\040\uff55\041\uff55\046\uff55\050\uff55\052\uff55\053\uff55" +
    "\060\uff55\001\002\000\062\003\uff5c\006\uff5c\015\uff5c\017" +
    "\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c" +
    "\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036" +
    "\uff5c\037\uff5c\040\uff5c\041\uff5c\046\uff5c\050\uff5c\052\uff5c" +
    "\053\uff5c\001\002\000\014\003\115\027\104\042\105\047" +
    "\103\060\072\001\002\000\014\003\uff58\027\uff58\042\uff58" +
    "\047\uff58\060\uff58\001\002\000\062\003\uff5f\006\uff5f\015" +
    "\uff5f\017\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\100" +
    "\026\074\030\uff5f\031\uff5f\032\106\033\uff5f\034\uff5f\035" +
    "\uff5f\036\uff5f\037\uff5f\040\uff5f\041\070\046\uff5f\050\uff5f" +
    "\052\uff5f\053\uff5f\001\002\000\062\003\uff5e\006\uff5e\015" +
    "\uff5e\017\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\100" +
    "\026\074\030\uff5e\031\uff5e\032\106\033\uff5e\034\uff5e\035" +
    "\uff5e\036\uff5e\037\uff5e\040\uff5e\041\070\046\uff5e\050\uff5e" +
    "\052\uff5e\053\uff5e\001\002\000\046\003\uff67\024\065\025" +
    "\uff67\026\uff67\027\uff67\030\055\031\047\032\uff67\033\064" +
    "\034\050\035\062\036\051\037\052\040\053\041\uff67\042" +
    "\uff67\047\uff67\060\uff67\001\002\000\070\003\uff50\006\uff50" +
    "\015\uff50\017\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025" +
    "\uff50\026\uff50\030\uff50\031\uff50\032\uff50\033\uff50\034\uff50" +
    "\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50\044\uff4f\045" +
    "\uff4f\046\uff50\050\uff50\052\uff50\053\uff50\060\uff50\001\002" +
    "\000\012\027\104\042\105\047\103\060\072\001\002\000" +
    "\014\003\uff59\027\uff59\042\uff59\047\uff59\060\uff59\001\002" +
    "\000\064\003\uff52\006\uff52\015\uff52\017\uff52\021\uff52\022" +
    "\uff52\023\uff52\024\uff52\025\uff52\026\uff52\030\uff52\031\uff52" +
    "\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040" +
    "\uff52\041\uff52\046\uff52\050\uff52\052\uff52\053\uff52\060\uff52" +
    "\001\002\000\006\003\111\050\112\001\002\000\064\003" +
    "\uff51\006\uff51\015\uff51\017\uff51\021\uff51\022\uff51\023\uff51" +
    "\024\uff51\025\uff51\026\uff51\030\uff51\031\uff51\032\uff51\033" +
    "\uff51\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51" +
    "\046\uff51\050\uff51\052\uff51\053\uff51\060\uff51\001\002\000" +
    "\064\003\uff53\006\uff53\015\uff53\017\uff53\021\uff53\022\uff53" +
    "\023\uff53\024\uff53\025\uff53\026\uff53\030\uff53\031\uff53\032" +
    "\uff53\033\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53" +
    "\041\uff53\046\uff53\050\uff53\052\uff53\053\uff53\060\uff53\001" +
    "\002\000\062\003\uff5d\006\uff5d\015\uff5d\017\uff5d\021\uff5d" +
    "\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\030\uff5d\031" +
    "\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d" +
    "\040\uff5d\041\uff5d\046\uff5d\050\uff5d\052\uff5d\053\uff5d\001" +
    "\002\000\062\003\uff61\006\uff61\015\uff61\017\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\030\uff61\031" +
    "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61" +
    "\040\uff61\041\uff61\046\uff61\050\uff61\052\uff61\053\uff61\001" +
    "\002\000\064\003\uff5a\006\uff5a\015\uff5a\017\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\030\uff5a\031" +
    "\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\041\uff5a\046\uff5a\050\uff5a\052\uff5a\053\uff5a\060" +
    "\uff5a\001\002\000\064\003\uff5b\006\uff5b\015\uff5b\017\uff5b" +
    "\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\030" +
    "\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b" +
    "\037\uff5b\040\uff5b\041\uff5b\046\uff5b\050\uff5b\052\uff5b\053" +
    "\uff5b\060\uff5b\001\002\000\062\003\uff60\006\uff60\015\uff60" +
    "\017\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026" +
    "\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60" +
    "\036\uff60\037\uff60\040\uff60\041\uff60\046\uff60\050\uff60\052" +
    "\uff60\053\uff60\001\002\000\030\003\uff7d\006\uff7d\015\uff7d" +
    "\017\uff7d\021\uff7d\022\uff7d\023\uff7d\046\uff7d\050\uff7d\052" +
    "\uff7d\053\uff7d\001\002\000\030\003\uff7a\006\uff7a\015\uff7a" +
    "\017\uff7a\021\uff7a\022\uff7a\023\uff7a\046\uff7a\050\uff7a\052" +
    "\uff7a\053\uff7a\001\002\000\072\003\uff49\006\uff49\015\uff49" +
    "\017\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\026" +
    "\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49" +
    "\036\uff49\037\uff49\040\uff49\041\uff49\043\uff49\044\uff49\045" +
    "\uff49\046\uff49\050\uff49\052\uff49\053\uff49\060\uff49\001\002" +
    "\000\072\003\uff4a\006\uff4a\015\uff4a\017\uff4a\021\uff4a\022" +
    "\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a\030\uff4a\031\uff4a" +
    "\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040" +
    "\uff4a\041\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\050\uff4a" +
    "\052\uff4a\053\uff4a\060\uff4a\001\002\000\044\003\uff71\006" +
    "\uff71\015\uff71\017\uff71\021\uff71\022\uff71\023\uff71\033\uff71" +
    "\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\046\uff71\050" +
    "\uff71\052\uff71\053\uff71\001\002\000\030\003\uff7c\006\uff7c" +
    "\015\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c\046\uff7c\050" +
    "\uff7c\052\uff7c\053\uff7c\001\002\000\062\003\uff70\006\uff70" +
    "\015\uff70\017\uff70\021\uff70\022\uff70\023\uff70\024\065\025" +
    "\100\026\074\030\132\031\127\032\106\033\uff70\034\uff70" +
    "\035\uff70\036\uff70\037\uff70\040\uff70\041\070\046\uff70\050" +
    "\uff70\052\uff70\053\uff70\001\002\000\024\003\uff63\025\uff63" +
    "\026\uff63\027\uff63\032\uff63\041\uff63\042\uff63\047\uff63\060" +
    "\uff63\001\002\000\024\003\uff5f\025\100\026\074\027\104" +
    "\032\106\041\070\042\105\047\103\060\072\001\002\000" +
    "\044\003\uff72\006\uff72\015\uff72\017\uff72\021\uff72\022\uff72" +
    "\023\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\046\uff72\050\uff72\052\uff72\053\uff72\001\002\000\024" +
    "\003\uff64\025\uff64\026\uff64\027\uff64\032\uff64\041\uff64\042" +
    "\uff64\047\uff64\060\uff64\001\002\000\004\060\141\001\002" +
    "\000\052\003\uff6a\006\uff6a\015\uff6a\017\uff6a\021\uff6a\022" +
    "\uff6a\023\uff6a\024\uff6a\030\uff6a\031\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\046\uff6a\050\uff6a\052" +
    "\uff6a\053\uff6a\001\002\000\052\003\uff6b\006\uff6b\015\uff6b" +
    "\017\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\030\uff6b\031" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b" +
    "\046\uff6b\050\uff6b\052\uff6b\053\uff6b\001\002\000\052\003" +
    "\uff6d\006\uff6d\015\uff6d\017\uff6d\021\uff6d\022\uff6d\023\uff6d" +
    "\024\uff6d\030\uff6d\031\uff6d\033\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\046\uff6d\050\uff6d\052\uff6d\053\uff6d" +
    "\001\002\000\052\003\uff6f\006\uff6f\015\uff6f\017\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\024\065\030\132\031\127\033\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\046\uff6f\050" +
    "\uff6f\052\uff6f\053\uff6f\001\002\000\052\003\uff6e\006\uff6e" +
    "\015\uff6e\017\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\030" +
    "\uff6e\031\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e" +
    "\040\uff6e\046\uff6e\050\uff6e\052\uff6e\053\uff6e\001\002\000" +
    "\004\003\142\001\002\000\052\003\uff6c\006\uff6c\015\uff6c" +
    "\017\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\030\uff6c\031" +
    "\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c" +
    "\046\uff6c\050\uff6c\052\uff6c\053\uff6c\001\002\000\052\003" +
    "\uff69\006\uff69\015\uff69\017\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\uff69\030\uff69\031\uff69\033\uff69\034\uff69\035\uff69\036" +
    "\uff69\037\uff69\040\uff69\046\uff69\050\uff69\052\uff69\053\uff69" +
    "\001\002\000\014\006\uff88\022\uff88\023\uff88\050\155\052" +
    "\uff88\001\002\000\016\006\uff83\022\uff83\023\uff83\050\uff83" +
    "\052\uff83\053\147\001\002\000\014\006\uff85\022\uff85\023" +
    "\uff85\050\uff85\052\uff85\001\002\000\046\003\uff67\024\065" +
    "\025\uff67\026\uff67\027\uff67\030\055\031\047\032\uff67\033" +
    "\064\034\050\035\062\036\051\037\052\040\053\041\uff67" +
    "\042\uff67\047\uff67\060\uff67\001\002\000\016\006\uff80\022" +
    "\uff80\023\uff80\050\uff80\052\uff80\053\uff80\001\002\000\016" +
    "\006\uff82\022\uff82\023\uff82\050\uff82\052\uff82\053\147\001" +
    "\002\000\014\006\uff84\022\uff84\023\uff84\050\uff84\052\uff84" +
    "\001\002\000\016\006\uff81\022\uff81\023\uff81\050\uff81\052" +
    "\uff81\053\uff81\001\002\000\016\006\uff7f\022\uff7f\023\uff7f" +
    "\050\uff7f\052\uff7f\053\uff7f\001\002\000\012\006\uff89\022" +
    "\uff89\023\uff89\052\uff89\001\002\000\004\050\157\001\002" +
    "\000\012\006\uff87\022\uff87\023\uff87\052\uff87\001\002\000" +
    "\010\006\uffa7\022\uffa7\023\uffa7\001\002\000\012\006\uffa5" +
    "\022\uffa5\023\uffa5\052\164\001\002\000\012\006\uffa3\022" +
    "\uffa3\023\uffa3\052\uffa3\001\002\000\010\006\uffa8\022\uffa8" +
    "\023\uffa8\001\002\000\020\006\uffa1\016\020\020\024\022" +
    "\uffa1\023\uffa1\027\027\052\uffa1\001\002\000\012\006\uffa2" +
    "\022\uffa2\023\uffa2\052\uffa2\001\002\000\012\006\uffa4\022" +
    "\uffa4\023\uffa4\052\uffa4\001\002\000\004\021\170\001\002" +
    "\000\022\003\uff98\006\uff98\016\uff98\020\uff98\022\uff98\023" +
    "\uff98\027\uff98\052\uff98\001\002\000\022\003\026\006\uffa1" +
    "\016\020\020\024\022\uffa1\023\uffa1\027\027\052\uffa1\001" +
    "\002\000\010\006\uff95\022\173\023\uff95\001\002\000\046" +
    "\003\uff67\024\065\025\uff67\026\uff67\027\uff67\030\055\031" +
    "\047\032\uff67\033\064\034\050\035\062\036\051\037\052" +
    "\040\053\041\uff67\042\uff67\047\uff67\060\uff67\001\002\000" +
    "\006\006\uff8f\023\200\001\002\000\010\006\uff92\022\uff92" +
    "\023\uff92\001\002\000\010\006\uff94\022\173\023\uff94\001" +
    "\002\000\010\006\uff93\022\uff93\023\uff93\001\002\000\016" +
    "\003\026\006\uffa1\016\020\020\024\027\027\052\uffa1\001" +
    "\002\000\004\006\uff8e\001\002\000\004\006\uff97\001\002" +
    "\000\004\006\204\001\002\000\012\006\uff96\022\uff96\023" +
    "\uff96\052\uff96\001\002\000\004\006\uff8d\001\002\000\004" +
    "\021\207\001\002\000\022\003\uff91\006\uff91\016\uff91\020" +
    "\uff91\022\uff91\023\uff91\027\uff91\052\uff91\001\002\000\022" +
    "\003\026\006\uffa1\016\020\020\024\022\uffa1\023\uffa1\027" +
    "\027\052\uffa1\001\002\000\010\006\uff90\022\uff90\023\uff90" +
    "\001\002\000\046\003\uff67\024\065\025\uff67\026\uff67\027" +
    "\uff67\030\055\031\047\032\uff67\033\064\034\050\035\062" +
    "\036\051\037\052\040\053\041\uff67\042\uff67\047\uff67\060" +
    "\uff67\001\002\000\012\006\uff7e\022\uff7e\023\uff7e\052\uff7e" +
    "\001\002\000\004\017\215\001\002\000\016\003\uff9b\006" +
    "\uff9b\016\uff9b\020\uff9b\027\uff9b\052\uff9b\001\002\000\016" +
    "\003\026\006\uffa1\016\020\020\024\027\027\052\uffa1\001" +
    "\002\000\004\006\uff9a\001\002\000\004\006\221\001\002" +
    "\000\012\006\uff99\022\uff99\023\uff99\052\uff99\001\002\000" +
    "\004\027\223\001\002\000\004\044\224\001\002\000\004" +
    "\002\000\001\002\000\020\003\371\005\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\027\373\001\002\000\014\005\ufff0" +
    "\006\ufff0\010\230\011\ufff0\012\ufff0\001\002\000\012\005" +
    "\uffe8\006\uffe8\011\303\012\uffe8\001\002\000\016\003\231" +
    "\005\uffed\006\uffed\011\uffed\012\uffed\027\233\001\002\000" +
    "\012\005\uffee\006\uffee\011\uffee\012\uffee\001\002\000\014" +
    "\005\uffec\006\uffec\011\uffec\012\uffec\027\233\001\002\000" +
    "\004\040\236\001\002\000\014\005\uffea\006\uffea\011\uffea" +
    "\012\uffea\027\uffea\001\002\000\012\005\uffef\006\uffef\011" +
    "\uffef\012\uffef\001\002\000\014\013\237\014\246\027\242" +
    "\054\245\055\240\001\002\000\010\006\uffb6\027\260\052" +
    "\uffb6\001\002\000\010\006\uffc0\050\uffc0\052\uffc0\001\002" +
    "\000\004\052\256\001\002\000\010\006\uffbd\050\uffbd\052" +
    "\uffbd\001\002\000\010\006\uffbe\050\uffbe\052\uffbe\001\002" +
    "\000\010\006\uffbf\050\uffbf\052\uffbf\001\002\000\010\006" +
    "\uffc1\050\uffc1\052\uffc1\001\002\000\046\003\uff67\024\065" +
    "\025\uff67\026\uff67\027\uff67\030\055\031\047\032\uff67\033" +
    "\064\034\050\035\062\036\051\037\052\040\053\041\uff67" +
    "\042\uff67\047\uff67\060\uff67\001\002\000\004\015\250\001" +
    "\002\000\014\013\237\014\246\027\252\054\255\055\251" +
    "\001\002\000\010\006\uffb2\050\uffb2\052\uffb2\001\002\000" +
    "\010\006\uffaf\050\uffaf\052\uffaf\001\002\000\010\006\uffb3" +
    "\050\uffb3\052\uffb3\001\002\000\010\006\uffb0\050\uffb0\052" +
    "\uffb0\001\002\000\010\006\uffb1\050\uffb1\052\uffb1\001\002" +
    "\000\014\005\uffe9\006\uffe9\011\uffe9\012\uffe9\027\uffe9\001" +
    "\002\000\004\051\300\001\002\000\006\051\uffad\053\272" +
    "\001\002\000\006\006\uffb5\052\uffb5\001\002\000\006\006" +
    "\uffbb\052\266\001\002\000\006\006\uffba\052\266\001\002" +
    "\000\004\006\270\001\002\000\006\006\uffb8\052\uffb8\001" +
    "\002\000\010\006\uffb6\027\260\052\uffb6\001\002\000\006" +
    "\006\uffb7\052\uffb7\001\002\000\010\006\uffbc\050\uffbc\052" +
    "\uffbc\001\002\000\006\006\uffb9\052\uffb9\001\002\000\004" +
    "\027\277\001\002\000\006\051\uffac\053\272\001\002\000" +
    "\004\051\uffae\001\002\000\006\051\uffaa\053\uffaa\001\002" +
    "\000\006\051\uffab\053\uffab\001\002\000\006\051\uffa9\053" +
    "\uffa9\001\002\000\014\013\237\014\246\027\242\054\245" +
    "\055\240\001\002\000\006\006\uffb4\052\uffb4\001\002\000" +
    "\014\005\uffeb\006\uffeb\011\uffeb\012\uffeb\027\uffeb\001\002" +
    "\000\014\003\363\005\uffe5\006\uffe5\012\uffe5\027\260\001" +
    "\002\000\010\005\uffe0\006\uffe0\012\305\001\002\000\004" +
    "\027\330\001\002\000\010\005\uffdd\006\uffdd\012\uffdd\001" +
    "\002\000\004\052\327\001\002\000\010\005\uffdf\006\uffdf" +
    "\012\305\001\002\000\006\005\ufff9\006\ufff9\001\002\000" +
    "\004\052\313\001\002\000\016\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\001\002\000\016\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\001\002\000\006" +
    "\005\uffda\006\uffda\001\002\000\006\005\321\006\uffd7\001" +
    "\002\000\004\006\uffd6\001\002\000\004\006\324\001\002" +
    "\000\016\003\026\006\uffa1\016\020\020\024\027\027\052" +
    "\uffa1\001\002\000\004\052\uffd9\001\002\000\004\006\uffd5" +
    "\001\002\000\004\027\325\001\002\000\004\052\uffd8\001" +
    "\002\000\010\005\uffde\006\uffde\012\uffde\001\002\000\010" +
    "\005\uffdc\006\uffdc\012\uffdc\001\002\000\014\011\334\027" +
    "\uffc3\047\337\050\uffcc\052\uffd3\001\002\000\004\050\uffcb" +
    "\001\002\000\004\052\uffd4\001\002\000\006\050\uffc9\052" +
    "\354\001\002\000\004\027\uffc2\001\002\000\004\050\351" +
    "\001\002\000\004\052\uffd2\001\002\000\010\011\uffd0\027" +
    "\uffd0\050\uffd0\001\002\000\004\027\260\001\002\000\004" +
    "\052\uffd1\001\002\000\004\051\343\001\002\000\014\013" +
    "\237\014\246\027\242\054\245\055\240\001\002\000\006" +
    "\050\uffc4\052\uffc4\001\002\000\010\011\334\027\uffc3\050" +
    "\uffcc\001\002\000\004\050\uffcf\001\002\000\004\050\350" +
    "\001\002\000\004\052\uffce\001\002\000\004\052\uffcd\001" +
    "\002\000\006\050\uffc8\052\354\001\002\000\004\050\uffca" +
    "\001\002\000\006\011\334\027\uffc3\001\002\000\006\050" +
    "\uffc6\052\uffc6\001\002\000\006\050\uffc5\052\uffc5\001\002" +
    "\000\006\050\uffc7\052\uffc7\001\002\000\012\005\uffe4\006" +
    "\uffe4\012\uffe4\027\260\001\002\000\012\005\uffe2\006\uffe2" +
    "\012\uffe2\027\uffe2\001\002\000\010\005\uffe7\006\uffe7\012" +
    "\uffe7\001\002\000\010\005\uffe6\006\uffe6\012\uffe6\001\002" +
    "\000\004\051\365\001\002\000\014\013\237\014\246\027" +
    "\242\054\245\055\240\001\002\000\004\052\367\001\002" +
    "\000\012\005\uffe1\006\uffe1\012\uffe1\027\uffe1\001\002\000" +
    "\012\005\uffe3\006\uffe3\012\uffe3\027\uffe3\001\002\000\014" +
    "\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000" +
    "\016\005\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\027\373" +
    "\001\002\000\004\040\376\001\002\000\016\005\ufff2\006" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\027\ufff2\001\002\000\014" +
    "\005\ufff7\006\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000" +
    "\046\003\uff67\024\065\025\uff67\026\uff67\027\uff67\030\055" +
    "\031\047\032\uff67\033\064\034\050\035\062\036\051\037" +
    "\052\040\053\041\uff67\042\uff67\047\uff67\060\uff67\001\002" +
    "\000\004\052\u0100\001\002\000\016\005\ufff1\006\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\027\ufff1\001\002\000\016\005\ufff3" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\027\ufff3\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\012\135\011\001\001\000\004\005" +
    "\225\001\001\000\004\133\013\001\001\000\004\003\014" +
    "\001\001\000\002\001\001\000\004\134\016\001\001\000" +
    "\022\057\032\063\024\064\021\065\030\066\031\074\027" +
    "\104\020\130\022\001\001\000\020\105\213\107\055\110" +
    "\065\111\060\116\056\117\053\121\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\105" +
    "\166\107\055\110\065\111\060\116\056\117\053\121\062" +
    "\001\001\000\010\060\162\061\160\062\161\001\001\000" +
    "\002\001\001\000\010\075\035\076\034\147\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\077\155\100\145\105\144\107\055" +
    "\110\065\111\060\116\056\117\053\121\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\077\143\100\145" +
    "\105\144\107\055\110\065\111\060\116\056\117\053\121" +
    "\062\001\001\000\006\131\041\132\042\001\001\000\020" +
    "\105\057\107\055\110\065\111\060\116\056\117\053\121" +
    "\062\001\001\000\004\132\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\122\125\123\070\124" +
    "\101\125\075\126\076\127\100\130\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\106\117\107\120\110\065\001\001\000\002" +
    "\001\001\000\020\122\072\123\070\124\101\125\075\126" +
    "\076\127\100\130\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\111\066\116\056\117\053\121\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\127\115\130\074" +
    "\001\001\000\002\001\001\000\012\123\113\124\101\125" +
    "\075\126\076\001\001\000\006\125\112\126\076\001\001" +
    "\000\020\105\107\107\055\110\065\111\060\116\056\117" +
    "\053\121\062\001\001\000\004\147\037\001\001\000\006" +
    "\127\106\130\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\112\130\113\136\114\135" +
    "\115\134\116\133\120\127\121\062\125\132\126\076\001" +
    "\001\000\002\001\001\000\020\122\142\123\070\124\101" +
    "\125\075\126\076\127\100\130\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\114\137\115" +
    "\134\116\133\120\127\121\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\101\151\102\150\103\147\001\001" +
    "\000\002\001\001\000\020\105\153\107\055\110\065\111" +
    "\060\116\056\117\053\121\062\001\001\000\002\001\001" +
    "\000\004\103\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\063\164" +
    "\064\021\065\030\066\031\074\027\104\020\130\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\144\170\001\001\000\022\057\171\063\024\064" +
    "\021\065\030\066\031\074\027\104\020\130\022\001\001" +
    "\000\010\067\173\070\175\071\174\001\001\000\020\105" +
    "\205\107\055\110\065\111\060\116\056\117\053\121\062" +
    "\001\001\000\006\072\201\073\200\001\001\000\002\001" +
    "\001\000\004\071\176\001\001\000\002\001\001\000\022" +
    "\057\204\063\024\064\021\065\030\066\031\074\027\104" +
    "\020\130\022\001\001\000\002\001\001\000\004\145\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\146\207\001\001\000\022" +
    "\057\210\063\024\064\021\065\030\066\031\074\027\104" +
    "\020\130\022\001\001\000\002\001\001\000\020\105\212" +
    "\107\055\110\065\111\060\116\056\117\053\121\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\142\215" +
    "\001\001\000\022\057\216\063\024\064\021\065\030\066" +
    "\031\074\027\104\020\130\022\001\001\000\004\143\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\374" +
    "\007\371\010\373\001\001\000\004\011\226\001\001\000" +
    "\004\015\303\001\001\000\010\012\234\013\231\014\233" +
    "\001\001\000\002\001\001\000\004\014\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\240\044\243\052\242\001\001\000\010\050\261\051" +
    "\260\053\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\105\246\107\055\110\065\111\060" +
    "\116\056\117\053\121\062\001\001\000\002\001\001\000" +
    "\006\044\253\052\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\273" +
    "\055\272\056\274\001\001\000\002\001\001\000\010\045" +
    "\263\046\262\047\264\001\001\000\004\047\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\266\051" +
    "\260\053\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\300\044\243\052\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\361" +
    "\017\357\020\360\053\363\001\001\000\014\021\310\022" +
    "\307\023\305\024\306\030\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\325\024" +
    "\306\030\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\136\313\001\001\000\006\004\314\135\011\001" +
    "\001\000\004\137\315\001\001\000\010\025\321\026\317" +
    "\027\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\057\322\063\024\064\021\065\030\066\031\074\027" +
    "\104\020\130\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\331\032\335\033\340\034" +
    "\334\035\330\041\332\042\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\352\037\351\040\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\344\001\001\000\004\053\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\343\044\243" +
    "\052\242\001\001\000\002\001\001\000\012\034\345\035" +
    "\330\041\332\042\337\001\001\000\004\141\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\356\001\001\000\002\001\001\000\006\041\355" +
    "\042\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\367\053\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\365\044\243\052\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\105\376\107\055\110" +
    "\065\111\060\116\056\117\053\121\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    OberonScanner.init(); 
    graph.addProcedure("write", "write");
    graph.addProcedure("read", "read");
    graph.addProcedure("writeln", "writeln");
    func_ali.put("write", "write");
    func_ali.put("read", "read");
    func_ali.put("writeln", "writeln");     
    HashMap<String, Variable> para = new HashMap<>();
    para.put("something_1", new Variable(IdType.INTEGER));
    Variable rw = new Variable (IdType.PROCEDURE, para);
    
    HashMap<String, Variable> para_2 = new HashMap<>();
    Variable wln = new Variable (IdType.PROCEDURE, para_2);
    
    HashMap<String, Variable> topMap = new HashMap<>();
    topMap.put("write", rw);
    topMap.put("read", rw);
    topMap.put("writeln", wln);
    idStack.push(topMap);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return getScanner().next_token(); 

    }


    public CallGraph graph = new CallGraph();
    
    public Stack<HashMap<String, Variable>> idStack = new Stack<>();
    public HashMap<String, String> func_ali = new HashMap<>();
    public HashMap<String, String> edge = new HashMap<>();
    public String temp;
    public Variable sec_temp;
    public String id_temp;

    public boolean hasError = false;

    public int index = 0;
    public HashMap<String, Variable> temp_head = new HashMap<>();
    int fun_count = 0;
    HashMap<String, Integer> call_count = new HashMap<>();
     public void addCallSite(String site, HashMap<String, String> callProc){
        Iterator<Entry<String, String>> iter = callProc.entrySet().iterator(); 
        while (iter.hasNext()) { 
            Entry<String, String> entry = iter.next();
            graph.addCallSite(entry.getKey(), site, entry.getValue());
            String id = new String();
            for(int i = entry.getKey().length() -1; i >= 0; i--) {
                if(Character.isDigit(entry.getKey().charAt(i))) {
                    continue;
                }
                id = entry.getKey().substring(0, i);
                break;
            }
            edge.put(entry.getKey(),id);
        } 
    }
    public void draw(){
        Iterator<Entry<String, String>> iter = edge.entrySet().iterator();
        while (iter.hasNext()) {
            Entry<String, String> entry = iter.next();
            try {
                graph.addEdge(entry.getKey(),func_ali.get(entry.getValue()));
            } catch (SourceNotFoundException
                    | TargetNotFoundException e) {
                e.printStackTrace();
            }
        } 
        graph.show();
    }

    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        System.err.println("Syntax error at line " + (cur_token.left + 1)
            + " column " + (cur_token.right + 1) + ", near \"" + cur_token.value + "\"");
        if(cur_token.right == 0){
            report_error("Maybe " + new MissingSemicolonException().getMessage(), null);
        }
    }
    @Override
    public void report_error(String message, Object info) {
        hasError = true;
        System.err.println(message);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // selector_key ::= LSQBRACKET expression error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingRightParenthesisException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector_key",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // selector_key ::= LSQBRACKET expression RSQBRACKET 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(expr.getType() != IdType.INTEGER && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(IdType.ARRAY, "[" + (String)expr.getValue() + "]");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector_key",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // selector_key ::= DOT IDENTIFIER 
            {
              Variable RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(parser.sec_temp.getType() != IdType.RECORD && parser.sec_temp.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(dtleft + 1, dtright + 1).getMessage(), null);
    }
    HashMap<String, Variable> recMap = new HashMap<>();
    if(parser.sec_temp.getValue() instanceof HashMap<?,?>){
        recMap = (HashMap<String, Variable>) parser.sec_temp.getValue();
    } 
    Variable type = recMap.get(id);
    if(type == null){
        parser.report_error(new IllegalIdentifierException(idleft + 1, idright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
        parser.sec_temp = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(type.getType(), "." + id);
        parser.sec_temp = type;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector_key",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // selector_one ::= selector_key 
            {
              Variable RESULT =null;
		int sec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sec_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = sec_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector_one",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // selector_one ::= selector_one selector_key 
            {
              Variable RESULT =null;
		int sec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable sec_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sec_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(parser.sec_temp.getType() == IdType.RECORD){
        RESULT = new Variable(sec_key.getType(), (String)sec_one.getValue() + (String)sec_key.getValue() );
    } else if(parser.sec_temp.getType() == IdType.INTEGER || parser.sec_temp.getType() == IdType.BOOLEAN){
        RESULT = new Variable(parser.sec_temp.getType(), (String)sec_one.getValue() + (String)sec_key.getValue() );
    } else if(parser.sec_temp.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(sec_oneleft + 1, sec_oneright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(IdType.ERROR);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector_one",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // selector ::= IDENTIFIER NT$12 selector_one 
            {
              Variable RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Variable) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sec_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(parser.sec_temp.getType() == IdType.RECORD){
        RESULT = new Variable(sec_one.getType(), parser.id_temp + (String)sec_one.getValue() );
    } else if(parser.sec_temp.getType() == IdType.INTEGER || parser.sec_temp.getType() == IdType.BOOLEAN){
        RESULT = new Variable(parser.sec_temp.getType(), parser.id_temp + (String)sec_one.getValue() );
    } else if(parser.sec_temp.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(sec_oneleft + 1, sec_oneright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(IdType.ERROR);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$12 ::= 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        parser.report_error(new IllegalIdentifierException(idleft + 1, idright + 1).getMessage(), null);
        parser.sec_temp = new Variable(IdType.ERROR);
        parser.id_temp = id;
    } else {
        parser.sec_temp = var;
        parser.id_temp = id;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // selector ::= IDENTIFIER 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        parser.report_error(new IllegalIdentifierException(idleft + 1, idright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(var.getType(), id);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // factor ::= LPARENTHESE expression error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingRightParenthesisException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // factor ::= NOT factor 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(fac.getType() != IdType.BOOLEAN && fac.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(facleft + 1, facright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = new Variable(IdType.BOOLEAN, "~" + (String)fac.getValue());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // factor ::= LPARENTHESE expression RPARENTHESE 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new Variable(expr.getType(), "( " + (String)expr.getValue() + " )");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // factor ::= NUMBER 
            {
              Variable RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Variable(IdType.INTEGER, Integer.toString(num));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // factor ::= selector 
            {
              Variable RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sec = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operator_four ::= AND 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "&");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_four",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operator_four ::= MOD 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "MOD");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_four",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operator_four ::= DIV 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "DIV");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_four",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operator_four ::= MUL 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "*");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_four",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // term_key ::= operator_four error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingOperandException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_key",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // term_key ::= operator_four factor 
            {
              Variable RESULT =null;
		int op_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable op_four = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(op_four.getType() != fac.getType() && op_four.getType() != IdType.ERROR && fac.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(facleft + 1, facright + 1).getMessage(), null);
    }
    RESULT = new Variable(op_four.getType(), (String)op_four.getValue() + (String)fac.getValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_key",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // term_two ::= term_key 
            {
              Variable RESULT =null;
		int tm_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tm_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = tm_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_two",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // term_two ::= term_two term_key 
            {
              Variable RESULT =null;
		int tm_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tm_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tm_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tm_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tm_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(tm_two.getType() != tm_key.getType() && tm_two.getType() != IdType.ERROR && tm_key.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(tm_keyleft + 1, tm_keyright + 1).getMessage(), null);
    }
    RESULT = new Variable(tm_key.getType(), (String)tm_two.getValue() + (String)tm_key.getValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_two",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // term_one ::= term_two 
            {
              Variable RESULT =null;
		int tm_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tm_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = tm_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_one",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // term_one ::= 
            {
              Variable RESULT =null;
		
    RESULT = null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_one",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // term ::= term_one error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingOperandException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // term ::= factor term_one 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tm_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tm_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(tm_one == null){
        RESULT = fac;
    } else {
        RESULT = new Variable(tm_one.getType(), (String)fac.getValue() + (String)tm_one.getValue());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operator_three_two ::= OR 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "OR");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_three_two",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operator_three_one ::= MINUS 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_three_one",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operator_three_one ::= ADD 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_three_one",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operator_two ::= MINUS 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_two",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operator_two ::= ADD 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER, "+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_two",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operator_two ::= 
            {
              Variable RESULT =null;
		
    RESULT = null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_two",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simple_expression_key_OR ::= operator_three_two term 
            {
              Variable RESULT =null;
		int op_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable op_three = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(op_three.getType() != tm.getType() && op_three.getType() != IdType.ERROR && tm.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(tmleft + 1, tmright + 1).getMessage(), null);
    }
    RESULT = new Variable(op_three.getType(), (String)op_three.getValue() + (String)tm.getValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_key_OR",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // simple_expression_key_AM ::= operator_three_one term 
            {
              Variable RESULT =null;
		int op_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable op_three = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tm = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(op_three.getType() != tm.getType() && op_three.getType() != IdType.ERROR && tm.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(tmleft + 1, tmright + 1).getMessage(), null);
    }
    RESULT = new Variable(op_three.getType(), (String)op_three.getValue() + (String)tm.getValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_key_AM",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // simple_expression_key ::= simple_expression_key_OR 
            {
              Variable RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_key",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // simple_expression_key ::= simple_expression_key_AM 
            {
              Variable RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_key",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // simple_expression_two ::= term_key NUMBER error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingOperatorException().getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_two",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // simple_expression_two ::= simple_expression_key 
            {
              Variable RESULT =null;
		int sim_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = sim_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_two",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // simple_expression_two ::= simple_expression_two simple_expression_key 
            {
              Variable RESULT =null;
		int sim_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable sim_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     if(sim_two.getType() != sim_key.getType() && sim_two.getType() != IdType.ERROR && sim_key.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(sim_twoleft + 1, sim_tworight + 1).getMessage(), null);
    }
    RESULT = new Variable(sim_key.getType(), (String)sim_two.getValue() + (String)sim_key.getValue());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_two",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // simple_expression_one ::= simple_expression_two 
            {
              Variable RESULT =null;
		int sim_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = sim_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_one",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // simple_expression_one ::= 
            {
              Variable RESULT =null;
		
    RESULT = null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_one",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // simple_expression ::= simple_expression_key_OR error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingOperandException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // simple_expression ::= operator_two term simple_expression_one 
            {
              Variable RESULT =null;
		int op_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable op_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tm = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String value = new String();
    if(op_two != null){
        value += (String)op_two.getValue();
    } 
    value += (String)tm.getValue();
    if(sim_one != null){
        value += (String)sim_one.getValue();
        RESULT = new Variable(sim_one.getType(), value);
    } else {
        RESULT = new Variable(tm.getType(), value);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operator_one ::= BIGEQ 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, ">=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operator_one ::= BIG 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, ">");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operator_one ::= LESSEQ 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "&lt;=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operator_one ::= LESS 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "&lt;");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operator_one ::= NOTEQ 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "#");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operator_one ::= EQUAL 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN, "=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator_one",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_two ::= operator_one simple_expression 
            {
              Variable RESULT =null;
		int op_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable op_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr.getType() != IdType.INTEGER && sim_expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(sim_exprleft + 1, sim_exprright + 1).getMessage(), null);
    }
    String value = (String)op_one.getValue() + (String)sim_expr.getValue();
    RESULT = new Variable(sim_expr.getType(), value);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_two",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_one ::= expression_two 
            {
              Variable RESULT =null;
		int expr_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr_two = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = expr_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_one",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_one ::= 
            {
              Variable RESULT =null;
		
    RESULT = null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_one",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= expression_two error 
            {
              Variable RESULT =null;
		
    parser.report_error(new MissingOperandException().getMessage(), null);
    RESULT = new Variable(IdType.ERROR);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= simple_expression expression_one 
            {
              Variable RESULT =null;
		int sim_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable sim_expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr_one = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(expr_one == null){
        RESULT = sim_expr;
    } else if (sim_expr.getType() != IdType.INTEGER && sim_expr.getType() != IdType.ERROR) {
        parser.report_error(new TypeMismatchedException(sim_exprleft + 1, sim_exprright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else if (expr_one.getType() != IdType.INTEGER && expr_one.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(expr_oneleft + 1, expr_oneright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
   } else if(sim_expr.getType() == IdType.ERROR || expr_one.getType() == IdType.ERROR){
        RESULT = new Variable(IdType.ERROR);
    } else {
        String value = (String)sim_expr.getValue() + (String)expr_one.getValue();
        RESULT = new Variable(IdType.BOOLEAN, value);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // assignment ::= selector ASSIGN expression 
            {
              Variable RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sec = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sec.getType() != expr.getType() && sec.getType() != IdType.ERROR && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // actual_parameters_key ::= COMMA expression 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = expr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_key",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actual_parameters_four ::= actual_parameters_key 
            {
              ArrayList<Variable> RESULT =null;
		int para_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable para_key_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<Variable> para = new ArrayList<>();
    para.add(para_key_2);
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_four",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // actual_parameters_four ::= actual_parameters_four actual_parameters_key 
            {
              ArrayList<Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Variable> para_four = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable para_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    para_four.add(para_key);
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_four",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // actual_parameters_three ::= actual_parameters_four 
            {
              ArrayList<Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_four = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_three",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // actual_parameters_three ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_three",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // actual_parameters_two ::= expression actual_parameters_three 
            {
              ArrayList<Variable> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_three = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<Variable> para = new ArrayList<>();
    para.add(expr);
    para.addAll(para_three);
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_two",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // actual_parameters_one ::= actual_parameters_two 
            {
              ArrayList<Variable> RESULT =null;
		int para_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_two = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_one",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // actual_parameters_one ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_one",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // actual_parameters ::= error actual_parameters_one RPARENTHESE 
            {
              ArrayList<Variable> RESULT =null;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Variable> para_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    parser.report_error(new MissingRightParenthesisException().getMessage(), null);
    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // actual_parameters ::= LPARENTHESE actual_parameters_one 
            {
              ArrayList<Variable> RESULT =null;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.report_error(new MissingRightParenthesisException(para_oneleft + 1, para_oneright + 1).getMessage(), null);
    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // actual_parameters ::= LPARENTHESE actual_parameters_one RPARENTHESE 
            {
              ArrayList<Variable> RESULT =null;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Variable> para_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // procedure_call_one ::= actual_parameters 
            {
              ArrayList<Variable> RESULT =null;
		int act_paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int act_pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> act_para = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = act_para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_one",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // procedure_call_one ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_one",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // procedure_call ::= IDENTIFIER procedure_call_one 
            {
              HashMap<String,String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pro_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pro_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> pro_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    HashMap<String, Variable> topMap = parser.idStack.peek();
    HashMap<String, Variable> parameter = new HashMap<>();
    Variable procedure = topMap.get(id);
    if(procedure == null){
        parser.report_error(new IllegalIdentifierException(idleft + 1, idright + 1).getMessage(), null);
    } else if(! (procedure.getValue() instanceof HashMap<?, ?>)){
        parser.report_error(new TypeMismatchedException(pro_oneleft + 1, pro_oneright + 1).getMessage(), null);
    } else {
        parameter = (HashMap<String, Variable>) procedure.getValue();
        if(parameter.entrySet().size() != pro_one.size()){
            parser.report_error(new ParameterMismatchedException(pro_oneleft + 1, pro_oneright + 1).getMessage(), null);
        }

        Iterator<Entry<String, Variable>> iter = parameter.entrySet().iterator(); 
        while (iter.hasNext()) { 
            Entry<String, Variable> entry = iter.next();
            Integer index = Integer.parseInt((entry.getKey().split("_"))[1]);
            if(pro_one.get(index-1).getType() != entry.getValue().getType()
                && pro_one.get(index-1).getType() != IdType.ERROR && entry.getValue().getType() != IdType.ERROR){
                parser.report_error(new TypeMismatchedException(pro_oneleft + 1, pro_oneright + 1).getMessage(), null);
             }
        }
    }
    String para = new String(id+"(");
    if(pro_one.size() != 0){
        para += pro_one.get(0).getValue().toString();
        for(int i = 1 ; i < pro_one.size(); i++){
            para += ", " + pro_one.get(i).getValue().toString();
        }
    }
    para += ")";
    int index = 0;
    if(parser.call_count.get(id) != null){
        index = parser.call_count.get(id);
        parser.call_count.put(id, index+1);
    } else {
        parser.call_count.put(id, 1);
    }
    curMap.put(id+"_"+index, para);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_statement_else_one ::= ELSE statement_sequence 
            {
              HashMap<String,String> RESULT =null;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else_one",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_statement_else ::= if_statement_else_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_statement_else ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<String, String>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_statement_elseif_key ::= ELSIF expression THEN NT$11 statement_sequence 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_key",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$11 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_statement_elseif_one ::= if_statement_elseif_key 
            {
              HashMap<String,String> RESULT =null;
		int state_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_key_2 = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_key_2;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_one",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_statement_elseif_one ::= if_statement_elseif_one if_statement_elseif_key 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    state_one.putAll(state_key);
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_one",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_statement_elseif ::= if_statement_elseif_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_statement_elseif ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<String, String>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_statement ::= IF expression THEN NT$9 statement_sequence if_statement_elseif if_statement_else NT$10 END 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int state_elsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int state_elsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,String> state_elsif = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_else = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$10 ::= 
            {
              HashMap<String,String> RESULT =(HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int state_elsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int state_elsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state_elsif = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_else = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    HashMap<String, String> curMap = new HashMap<String, String>();
    curMap.putAll(state_seq);
    curMap.putAll(state_elsif);
    curMap.putAll(state_else);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$9 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_statement ::= WHILE expression DO NT$7 statement_sequence NT$8 END 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$8 ::= 
            {
              HashMap<String,String> RESULT =(HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$7 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement_one ::= while_statement 
            {
              HashMap<String,String> RESULT =null;
		int while_stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int while_stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> while_state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(while_state);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement_one ::= if_statement 
            {
              HashMap<String,String> RESULT =null;
		int if_stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> if_state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(if_state);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement_one ::= procedure_call 
            {
              HashMap<String,String> RESULT =null;
		int pro_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pro_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> pro_call = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(pro_call);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement_one ::= assignment 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement ::= statement_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement_sequence_key ::= SEMI statement 
            {
              HashMap<String,String> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_key",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement_sequence_two ::= statement_sequence_key 
            {
              HashMap<String,String> RESULT =null;
		int seq_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_key_2 = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = seq_key_2;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_two",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement_sequence_two ::= statement_sequence_two statement_sequence_key 
            {
              HashMap<String,String> RESULT =null;
		int seq_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seq_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> seq_two = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seq_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    seq_two.putAll(seq_key);
    RESULT = seq_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_two",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement_sequence_one ::= statement_sequence_two 
            {
              HashMap<String,String> RESULT =null;
		int seq_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_two = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = seq_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_one",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement_sequence_one ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_one",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement_sequence ::= error SEMI 
            {
              HashMap<String,String> RESULT =null;
		
    parser.report_error(new SyntacticException("Someting error in statement").getMessage(), null);
    RESULT = new HashMap<String,String>();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement_sequence ::= statement statement_sequence_one 
            {
              HashMap<String,String> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seq_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    state.putAll(seq_one);
    RESULT = state;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // identifier_list_key ::= COMMA IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = id;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_key",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // identifier_list_two ::= identifier_list_key 
            {
              ArrayList<String> RESULT =null;
		int list_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list_key_2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<String> idList = new ArrayList<>();
    idList.add(list_key_2);
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_two",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // identifier_list_two ::= identifier_list_two identifier_list_key 
            {
              ArrayList<String> RESULT =null;
		int list_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> list_two = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list_key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    list_two.add(list_key);
    RESULT = list_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_two",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // identifier_list_one ::= identifier_list_two 
            {
              ArrayList<String> RESULT =null;
		int list_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> list_two = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = list_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_one",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // identifier_list_one ::= 
            {
              ArrayList<String> RESULT =null;
		
    ArrayList<String> idList = new ArrayList<>();
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_one",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier_list ::= IDENTIFIER identifier_list_one 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> list_one = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<String> idList = new ArrayList<>();
    idList.add(id);
    idList.addAll(list_one);
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_type ::= ARRAY expression OF IDENTIFIER 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        parser.report_error(new IllegalTypeException(exprleft + 1, exprright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else if(var.getType() == IdType.PROCEDURE && var.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
        RESULT = new Variable(IdType.ERROR);
    } else {
        RESULT = var;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // array_type ::= ARRAY expression OF record_type 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int record_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int record_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> record_tp = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(expr.getType() != IdType.INTEGER && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }
    RESULT = new Variable(IdType.RECORD, record_tp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // array_type ::= ARRAY expression OF BOOLEAN 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(expr.getType() != IdType.INTEGER && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }
    RESULT = new Variable(IdType.BOOLEAN);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // array_type ::= ARRAY expression OF INTEGER 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(expr.getType() != IdType.INTEGER && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }
    RESULT = new Variable(IdType.INTEGER);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_type ::= ARRAY expression OF array_type 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int array_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable array_tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(expr.getType() != IdType.INTEGER && expr.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
    }
    RESULT = array_tp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // field_list_key ::= identifier_list COLON type 
            {
              HashMap<String,Variable> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    for(int i = 0;i < id_list.size(); i++){
        curMap.put(id_list.get(i), tp);
    }
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_key",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // field_list ::= field_list_key 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fie_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fie_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fie_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // field_list ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // record_type_key ::= SEMI field_list 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fie_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fie_list = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fie_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_key",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // record_type_two ::= record_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = rec_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_two",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // record_type_two ::= record_type_two record_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rec_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> rec_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    rec_two.putAll(rec_key);
    RESULT = rec_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_two",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // record_type_one ::= record_type_two 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = rec_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_one",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // record_type_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_one",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // record_type ::= RECORD field_list record_type_one END 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fie_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> fie_list = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> rec_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    fie_list.putAll(rec_one);
    RESULT = fie_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= IDENTIFIER 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        parser.report_error(new IllegalIdentifierException(idleft + 1, idright + 1).getMessage(), null);
        RESULT = new Variable (IdType.ERROR);
    } else if(var.getType() == IdType.PROCEDURE && var.getType() != IdType.ERROR){
        parser.report_error(new TypeMismatchedException(idleft + 1, idright + 1).getMessage(), null);
        RESULT = new Variable (IdType.ERROR);
    } else {
        RESULT = var;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= array_type 
            {
              Variable RESULT =null;
		int array_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable array_tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = array_tp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= record_type 
            {
              Variable RESULT =null;
		int record_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int record_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> record_tp = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Variable(IdType.RECORD, record_tp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= INTEGER 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOLEAN 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fp_section_one ::= VAR 
            {
              HashMap<String,Variable> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_one",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fp_section_one ::= 
            {
              HashMap<String,Variable> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_one",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fp_section ::= fp_section_one identifier_list COLON type 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_sec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fp_sec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> fp_sec_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    for(int i = 0;i < id_list.size(); i++){
        curMap.put(id_list.get(i)+"_"+(++parser.index), tp);
    }
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formal_parameters_key ::= SEMI fp_section 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fp_secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fp_sec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fp_sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_key",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formal_parameters_four ::= formal_parameters_key 
            {
              HashMap<String,Variable> RESULT =null;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_four",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formal_parameters_four ::= formal_parameters_four formal_parameters_key 
            {
              HashMap<String,Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> para_four = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    para_four.putAll(para_key);
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_four",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formal_parameters_three ::= formal_parameters_four 
            {
              HashMap<String,Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_four = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_three",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameters_three ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_three",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formal_parameters_two ::= fp_section formal_parameters_three 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fp_secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> fp_sec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_three = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    fp_sec.putAll(para_three);
    RESULT = fp_sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_two",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formal_parameters_one ::= formal_parameters_two 
            {
              HashMap<String,Variable> RESULT =null;
		int para_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_one",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // formal_parameters_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_one",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formal_parameters ::= formal_parameters_one RPARENTHESE 
            {
              HashMap<String,Variable> RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> para = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    parser.report_error(new MissingLeftParenthesisException(paraleft + 1, pararight + 1).getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formal_parameters ::= LPARENTHESE NT$5 formal_parameters_one NT$6 RPARENTHESE 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> para_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    parser.index = 0;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              HashMap<String,Variable> RESULT =(HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              HashMap<String,Variable> RESULT =null;

    parser.index = 0;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure_heading_key ::= formal_parameters 
            {
              HashMap<String,Variable> RESULT =null;
		int formalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> formal = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = formal;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_key",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedure_heading_one ::= procedure_heading_key 
            {
              HashMap<String,Variable> RESULT =null;
		int heading_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int heading_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> heading_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = heading_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_one",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procedure_heading_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_one",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procedure_heading ::= PROCEDURE IDENTIFIER procedure_heading_one 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int heading_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int heading_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> heading_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.put(id, new Variable(IdType.PROCEDURE, heading_one));
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_body_key ::= BEGIN statement_sequence 
            {
              HashMap<String,String> RESULT =null;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_key",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure_body_one ::= procedure_body_key 
            {
              HashMap<String,String> RESULT =null;
		int body_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int body_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> body_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = body_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_one",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure_body_one ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_one",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure_body ::= procedure_body_one END IDENTIFIER 
            {
              String RESULT =null;
		int body_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int body_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> body_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.addCallSite(id, body_one);
    parser.idStack.pop();
    RESULT = id;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure_declaration ::= procedure_heading SEMI NT$3 declarations NT$4 procedure_body 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!parser.temp.equals(body)){
        parser.report_error(new MismatchedBlockIdException(bodyleft + 1, bodyright + 1).getMessage(), null);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              HashMap<String,Variable> RESULT =(HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

    HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> var = (HashMap<String, Variable>) parser.temp_head.get((parser.temp)).getValue();
    Iterator<Entry<String, Variable>> iter = var.entrySet().iterator(); 
    while (iter.hasNext()) { 
           Entry<String, Variable> entry = iter.next();
           String id = (entry.getKey().split("_"))[0];
           curMap.put(id, entry.getValue());
      }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              HashMap<String,Variable> RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    HashMap<String, Variable> topMap = parser.idStack.peek();
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    Iterator<Entry<String, Variable>> iter = head.entrySet().iterator(); 
    String id = new String();
    while (iter.hasNext()) { 
        Entry<String, Variable> entry = iter.next();
        if(entry.getValue().getType() == IdType.PROCEDURE){
            id = entry.getKey();
            curMap.put(entry.getKey(), entry.getValue());
            parser.func_ali.put(entry.getKey(), ("func" + (++parser.fun_count)));
            parser.graph.addProcedure(("func" + parser.fun_count), entry.getKey());
            break;
        }
    } 
    if(curMap.isEmpty()){
        /*Throw exception*/
    }
    if(topMap.get(id) != null){
        parser.report_error( new IdentifierConflictException(headleft + 1, headright + 2).getMessage(), null);
    } else {
        topMap.putAll(curMap);
    }
    parser.temp_head = head;
    parser.temp = id;
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declarations_procedure_key ::= procedure_declaration SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int pro_decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pro_decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> pro_dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = pro_dec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_key",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarations_procedure_one ::= declarations_procedure_key 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(procedure_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarations_procedure_one ::= declarations_procedure_one declarations_procedure_key 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedure_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> procedure_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procedure_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    procedure_one.putAll(procedure_key);
    RESULT = procedure_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarations_procedure ::= declarations_procedure_one 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(procedure_one);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarations_procedure ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarations_var_key ::= identifier_list COLON type SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
    for(int i = 0; i < id_list.size(); i++){
        if(curMap.get(id_list.get(i)) != null){
             parser.report_error(new IdentifierConflictException(id_listleft + 1, id_listright + 1).getMessage(), null);
        }
        curMap.put(id_list.get(i), tp);
        item.put(id_list.get(i), tp);
    }
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_key",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarations_var_two ::= declarations_var_key 
            {
              HashMap<String,Variable> RESULT =null;
		int var_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(var_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_two",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declarations_var_two ::= declarations_var_two declarations_var_key 
            {
              HashMap<String,Variable> RESULT =null;
		int var_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> var_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int var_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    var_two.putAll(var_key);
    RESULT = var_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_two",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarations_var_one ::= declarations_var_two 
            {
              HashMap<String,Variable> RESULT =null;
		int var_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(var_two);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_one",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarations_var_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_one",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarations_var ::= VAR error 
            {
              HashMap<String,Variable> RESULT =null;
		
    parser.report_error(new MissingSemicolonException().getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations_var ::= VAR declarations_var_one 
            {
              HashMap<String,Variable> RESULT =null;
		int var_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(var_one);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations_var ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_type_key ::= IDENTIFIER EQUAL type SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
    item.put(id, tp);
    if(curMap.get(id) != null){
        parser.report_error(new IdentifierConflictException(idleft + 1, idright + 1).getMessage(), null);
    } else {
        curMap.putAll(item);
    }
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_key",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations_type_two ::= declarations_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int type_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(type_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_two",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations_type_two ::= declarations_type_two declarations_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int type_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int type_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> type_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int type_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    type_two.putAll(type_key);
    RESULT = type_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_two",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations_type_one ::= declarations_type_two 
            {
              HashMap<String,Variable> RESULT =null;
		int type_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(type_two);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_one",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations_type_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_one",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_type ::= TYPE error 
            {
              HashMap<String,Variable> RESULT =null;
		
    parser.report_error(new MissingSemicolonException().getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_type ::= TYPE declarations_type_one 
            {
              HashMap<String,Variable> RESULT =null;
		int type_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(type_one);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_type ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarations_const_key ::= IDENTIFIER EQUAL expression SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
	if(expr.getType() == IdType.INTEGER) {
		item.put(id, expr);
	} else if(expr.getType() != IdType.ERROR) {
		parser.report_error(new TypeMismatchedException(exprleft + 1, exprright + 1).getMessage(), null);
	}

    if(curMap.get(id) != null){
        parser.report_error(new IdentifierConflictException(idleft + 1, idright + 1).getMessage(), null);
    } else {
        curMap.putAll(item);
    }
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_key",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarations_const_two ::= declarations_const_key 
            {
              HashMap<String,Variable> RESULT =null;
		int const_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(const_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_two",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarations_const_two ::= declarations_const_two declarations_const_key 
            {
              HashMap<String,Variable> RESULT =null;
		int const_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int const_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> const_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int const_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    const_two.putAll(const_key);
    RESULT = const_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_two",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_const_one ::= declarations_const_two 
            {
              HashMap<String,Variable> RESULT =null;
		int const_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(const_two);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_one",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations_const_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_one",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations_const ::= CONST error 
            {
              HashMap<String,Variable> RESULT =null;
		
    parser.report_error(new MissingSemicolonException().getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations_const ::= CONST declarations_const_one 
            {
              HashMap<String,Variable> RESULT =null;
		int const_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(const_one);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations_const ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= NT$2 declarations_const declarations_type declarations_var declarations_procedure 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int de_constleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int de_constright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> de_const = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int de_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int de_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> de_type = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int de_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int de_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> de_var = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int de_procedureleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int de_procedureright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> de_procedure = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.pop();
    HashMap<String, Variable> topMap = new HashMap<String, Variable>();
    if(!parser.idStack.empty()){
        topMap = parser.idStack.peek();
        Iterator<Entry<String, Variable>> iter = topMap.entrySet().iterator(); 
        while (iter.hasNext()) { 
            Entry<String, Variable> entry = iter.next();
            if(curMap.get(entry.getKey()) == null){
                curMap.put(entry.getKey(), entry.getValue());
             }
        }
    }
    parser.idStack.push(curMap);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              HashMap<String,Variable> RESULT =null;

    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    HashMap<String, Variable> topMap = new HashMap<String, Variable>();
    if(!parser.idStack.empty()){
        topMap = parser.idStack.peek();
        Iterator<Entry<String, Variable>> iter = topMap.entrySet().iterator(); 
        while (iter.hasNext()) { 
            Entry<String, Variable> entry = iter.next();
            if(entry.getValue().getType() == IdType.PROCEDURE){
                curMap.put(entry.getKey(), entry.getValue());
             }
        }
    }
    parser.idStack.push(curMap);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= BEGIN NT$1 statement_sequence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.addCallSite("main", state_seq);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;

    parser.graph.addProcedure("main", "main");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= MODULE IDENTIFIER error BEGIN 
            {
              HashMap<String,Variable> RESULT =null;
		
    parser.report_error(new MissingSemicolonException().getMessage(), null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> start_val = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // module ::= MODULE IDENTIFIER SEMI declarations NT$0 main END IDENTIFIER DOT 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		HashMap<String,Variable> dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!id2.equals(id1)){
        parser.report_error(new MismatchedBlockIdException().getMessage(), null);
    }
    parser.idStack.pop();
    if(!parser.hasError){
        System.out.println("Parsering Succeed! Show Call Graph...");
        parser.draw();
    } 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              HashMap<String,Variable> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    System.out.println("Module Name is " + id1); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

