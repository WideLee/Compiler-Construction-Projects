1. 个人基本信息：
姓名：李明宽
学号：11331173
E-mail：sysu_limingkuan@163.com
电话：13560473206
完成日期：2013年12月29日17:07:33

2. 补充说明：
代码文件使用的编码方式是UTF-8，如果使用GBK字符集进行打开中文的注释会出现乱码，因此编译的时候加上 -encoding UTF-8
为了方便运行，提交的代码我就不清理了~

Thanks\(^o^)/~


更新注记：
提交更新时间：2014年1月31日23:25:18
更新主要内容：
1）更新了测试样例，里面包括了软装置中提供的以及自己编写的测试样例。
2）对比上一次提交的版本，更改了对表达式expression的处理，放弃了对表达式的求值的处理，把表达式的Value设置为它的字面值，也就是源程序中的字符串，这样在输出调用图的时候更加能够表现出函数调用者中的参数的形式，相对来说更符合实验要求。
3）由于不用处理表达式求值，选择操作符的处理也完善了，能够进行嵌套选择操作并判断类型是否匹配。
4）完善了Javacup的错误处理，由于以前基本没怎么涉及到关于语法错误的处理，都是简单的在语法分析完成后执行语义动作时进行判断是否存在错误并抛出，经过一番研究，仔细查看了Javacup的官方文档以及Javacup部分源代码如（lr_parser.java,Symbol.java等），对Javacup的异常处理有了较深的认识，主要是使用error非终结符，然后重载lr_parser中的syntax_error函数以及report_error函数，在进行语法分析的时候使用report_error来报错而不使用throw抛出异常，这样能同时分析出一个源程序中的多个语法错误。由于syntax_error是lr_parser进行语法分析的时候进行的操作，因此能更准确指出错误所在的位置。
5）实验中通过仔细查看了Javacup生成的Parser.java文件，发现可以通过idleft获得当前id所在的行号，idright获得当前id所在的列号（都是从0开始），这样对错误位置的判断有了很大的帮助。
6）经过了这么长时间的研究与完善这部分实验，更加熟悉了Javacup的各种使用方法，在分析javacup源码的过程中也加深了对LR语法分析过程以及错误处理以及恢复的理解，对编译原理这门课语法分析这部分的认识提供了很大的帮助。

7）由于运行测试需要较长时间，这里把所有的变异源程序测试样例运行结果放在了<test_result.txt>


Thanks \(^o^)/~   马年快乐~

┬┴┬┌─　●─┬─　　│─┼─┐　●├─┤○
┴┬┴├┬　┌─┼─　│◎　│　│　○└┬┘●
─┼─││　│　│　　││─┴─┴　──┼──
●│○││　┴─┼─　　│○　　●　／　│　＼
