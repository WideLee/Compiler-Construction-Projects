
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 29 19:16:21 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import callgraph.*;
import exceptions.*;
import java.util.*;
import java.util.Map.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 29 19:16:21 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\116\002\000\002\002\013\000\002\002" +
    "\004\000\002\003\002\000\002\117\002\000\002\003\005" +
    "\000\002\120\002\000\002\004\007\000\002\005\002\000" +
    "\002\005\004\000\002\006\002\000\002\006\003\000\002" +
    "\007\004\000\002\007\003\000\002\010\006\000\002\011" +
    "\002\000\002\011\004\000\002\012\002\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\006\000" +
    "\002\015\002\000\002\015\004\000\002\016\002\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\020" +
    "\006\000\002\021\002\000\002\021\003\000\002\022\004" +
    "\000\002\022\003\000\002\023\004\000\002\121\002\000" +
    "\002\122\002\000\002\024\010\000\002\025\005\000\002" +
    "\026\002\000\002\026\003\000\002\027\004\000\002\030" +
    "\005\000\002\031\002\000\002\031\003\000\002\032\003" +
    "\000\002\123\002\000\002\124\002\000\002\033\007\000" +
    "\002\033\004\000\002\034\002\000\002\034\003\000\002" +
    "\035\004\000\002\036\002\000\002\036\003\000\002\037" +
    "\004\000\002\037\003\000\002\040\004\000\002\041\006" +
    "\000\002\042\002\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\006\000\002\045\002\000\002\045" +
    "\003\000\002\046\004\000\002\046\003\000\002\047\004" +
    "\000\002\050\002\000\002\050\003\000\002\051\005\000" +
    "\002\052\006\000\002\052\006\000\002\052\006\000\002" +
    "\052\006\000\002\052\006\000\002\053\004\000\002\054" +
    "\002\000\002\054\003\000\002\055\004\000\002\055\003" +
    "\000\002\056\004\000\002\057\004\000\002\060\002\000" +
    "\002\060\003\000\002\061\004\000\002\061\003\000\002" +
    "\062\004\000\002\063\002\000\002\063\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\125\002\000\002\126\002\000\002\065\011\000" +
    "\002\127\002\000\002\130\002\000\002\066\013\000\002" +
    "\067\002\000\002\067\003\000\002\070\004\000\002\070" +
    "\003\000\002\131\002\000\002\071\007\000\002\072\002" +
    "\000\002\072\003\000\002\073\004\000\002\074\004\000" +
    "\002\075\002\000\002\075\003\000\002\076\005\000\002" +
    "\076\004\000\002\077\002\000\002\077\003\000\002\100" +
    "\004\000\002\101\002\000\002\101\003\000\002\102\004" +
    "\000\002\102\003\000\002\103\004\000\002\104\005\000" +
    "\002\105\003\000\002\105\005\000\002\105\005\000\002" +
    "\105\005\000\002\105\005\000\002\105\005\000\002\105" +
    "\005\000\002\106\003\000\002\107\005\000\002\107\005" +
    "\000\002\107\005\000\002\107\003\000\002\110\005\000" +
    "\002\110\005\000\002\110\005\000\002\110\005\000\002" +
    "\110\003\000\002\111\003\000\002\111\004\000\002\111" +
    "\004\000\002\111\004\000\002\111\003\000\002\111\005" +
    "\000\002\111\004\000\002\112\005\000\002\112\004\000" +
    "\002\113\002\000\002\113\003\000\002\114\004\000\002" +
    "\114\003\000\002\115\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\004\004\001\002\000\004\027\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\uffff\001\002" +
    "\000\004\052\010\001\002\000\016\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\016\005\ufff9" +
    "\006\ufff9\007\177\010\ufff9\011\ufff9\012\ufff9\001\002\000" +
    "\006\005\001\006\001\001\002\000\006\005\015\006\ufffe" +
    "\001\002\000\004\006\174\001\002\000\014\006\ufffd\016" +
    "\ufffd\020\ufffd\027\ufffd\052\ufffd\001\002\000\014\006\uffa6" +
    "\016\017\020\023\027\025\052\uffa6\001\002\000\016\027" +
    "\056\030\051\031\044\042\060\047\055\060\045\001\002" +
    "\000\012\006\uffa4\022\uffa4\023\uffa4\052\uffa4\001\002\000" +
    "\012\006\uffa5\022\uffa5\023\uffa5\052\uffa5\001\002\000\004" +
    "\043\164\001\002\000\016\027\056\030\051\031\044\042" +
    "\060\047\055\060\045\001\002\000\012\006\uffab\022\uffab" +
    "\023\uffab\052\136\001\002\000\022\006\uff90\022\uff90\023" +
    "\uff90\043\uff69\044\041\045\032\047\035\052\uff90\001\002" +
    "\000\012\006\uffa3\022\uffa3\023\uffa3\052\uffa3\001\002\000" +
    "\012\006\uffa1\022\uffa1\023\uffa1\052\uffa1\001\002\000\012" +
    "\006\uffa2\022\uffa2\023\uffa2\052\uffa2\001\002\000\004\006" +
    "\ufffc\001\002\000\016\027\056\030\051\031\044\042\060" +
    "\047\055\060\045\001\002\000\012\006\uff8f\022\uff8f\023" +
    "\uff8f\052\uff8f\001\002\000\012\006\uff91\022\uff91\023\uff91" +
    "\052\uff91\001\002\000\030\006\uff8c\022\uff8c\023\uff8c\027" +
    "\056\030\051\031\044\042\060\047\055\050\uff8c\052\uff8c" +
    "\060\045\001\002\000\062\006\uff6a\015\uff6a\017\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\030\uff6a" +
    "\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037" +
    "\uff6a\040\uff6a\041\uff6a\043\uff6a\046\uff6a\050\uff6a\052\uff6a" +
    "\053\uff6a\001\002\000\064\006\uff68\015\uff68\017\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\030\uff68" +
    "\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037" +
    "\uff68\040\uff68\041\uff68\043\uff68\045\032\046\uff68\050\uff68" +
    "\052\uff68\053\uff68\001\002\000\064\006\uff66\015\uff66\017" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\043\uff66\045\uff66\046\uff66" +
    "\050\uff66\052\uff66\053\uff66\001\002\000\004\027\042\001" +
    "\002\000\062\006\uff6b\015\uff6b\017\uff6b\021\uff6b\022\uff6b" +
    "\023\uff6b\024\uff6b\025\uff6b\026\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\043\uff6b\046\uff6b\050\uff6b\052\uff6b\053\uff6b\001" +
    "\002\000\064\006\uff67\015\uff67\017\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\030\uff67\031\uff67\032" +
    "\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67" +
    "\041\uff67\043\uff67\045\uff67\046\uff67\050\uff67\052\uff67\053" +
    "\uff67\001\002\000\016\027\056\030\051\031\044\042\060" +
    "\047\055\060\045\001\002\000\060\006\uff72\015\uff72\017" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036" +
    "\uff72\037\uff72\040\uff72\041\uff72\046\uff72\050\uff72\052\uff72" +
    "\053\uff72\001\002\000\060\006\uff6e\015\uff6e\017\uff6e\021" +
    "\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\046\uff6e\050\uff6e\052\uff6e\053\uff6e" +
    "\001\002\000\060\006\uff78\015\uff78\017\uff78\021\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\072\026\067\030\uff78\031\uff78" +
    "\032\071\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\070\046\uff78\050\uff78\052\uff78\053\uff78\001\002" +
    "\000\014\006\uff8d\022\uff8d\023\uff8d\050\127\052\uff8d\001" +
    "\002\000\016\027\056\030\051\031\044\042\060\047\055" +
    "\060\045\001\002\000\016\006\uff89\022\uff89\023\uff89\050" +
    "\uff89\052\uff89\053\120\001\002\000\042\006\uff83\015\uff83" +
    "\017\uff83\021\uff83\022\uff83\023\uff83\033\111\034\105\035" +
    "\110\036\104\037\107\040\106\046\uff83\050\uff83\052\uff83" +
    "\053\uff83\001\002\000\060\006\uff73\015\uff73\017\uff73\021" +
    "\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\030\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\046\uff73\050\uff73\052\uff73\053\uff73" +
    "\001\002\000\020\027\056\030\051\031\044\042\060\047" +
    "\055\050\101\060\045\001\002\000\064\006\uff69\015\uff69" +
    "\017\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69" +
    "\036\uff69\037\uff69\040\uff69\041\uff69\044\041\045\032\046" +
    "\uff69\050\uff69\052\uff69\053\uff69\001\002\000\050\006\uff7c" +
    "\015\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c\024\065\030" +
    "\063\031\064\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\046\uff7c\050\uff7c\052\uff7c\053\uff7c\001\002\000" +
    "\016\027\056\030\051\031\044\042\060\047\055\060\045" +
    "\001\002\000\014\006\uff8b\022\uff8b\023\uff8b\050\uff8b\052" +
    "\uff8b\001\002\000\060\006\uff6f\015\uff6f\017\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\046\uff6f\050\uff6f\052\uff6f\053\uff6f\001" +
    "\002\000\016\027\056\030\051\031\044\042\060\047\055" +
    "\060\045\001\002\000\016\027\056\030\051\031\044\042" +
    "\060\047\055\060\045\001\002\000\016\027\056\030\051" +
    "\031\044\042\060\047\055\060\045\001\002\000\060\006" +
    "\uff79\015\uff79\017\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\072\026\067\030\uff79\031\uff79\032\071\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\070\046\uff79" +
    "\050\uff79\052\uff79\053\uff79\001\002\000\016\027\056\030" +
    "\051\031\044\042\060\047\055\060\045\001\002\000\016" +
    "\027\056\030\051\031\044\042\060\047\055\060\045\001" +
    "\002\000\016\027\056\030\051\031\044\042\060\047\055" +
    "\060\045\001\002\000\016\027\056\030\051\031\044\042" +
    "\060\047\055\060\045\001\002\000\060\006\uff76\015\uff76" +
    "\017\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\036\uff76\037\uff76\040\uff76\041\uff76\046\uff76\050\uff76\052" +
    "\uff76\053\uff76\001\002\000\060\006\uff77\015\uff77\017\uff77" +
    "\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\046\uff77\050\uff77\052\uff77\053" +
    "\uff77\001\002\000\060\006\uff74\015\uff74\017\uff74\021\uff74" +
    "\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\046\uff74\050\uff74\052\uff74\053\uff74\001" +
    "\002\000\060\006\uff75\015\uff75\017\uff75\021\uff75\022\uff75" +
    "\023\uff75\024\uff75\025\uff75\026\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\046\uff75\050\uff75\052\uff75\053\uff75\001\002\000" +
    "\060\006\uff7a\015\uff7a\017\uff7a\021\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\072\026\067\030\uff7a\031\uff7a\032\071\033" +
    "\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\070" +
    "\046\uff7a\050\uff7a\052\uff7a\053\uff7a\001\002\000\060\006" +
    "\uff7b\015\uff7b\017\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\025\072\026\067\030\uff7b\031\uff7b\032\071\033\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\070\046\uff7b" +
    "\050\uff7b\052\uff7b\053\uff7b\001\002\000\060\006\uff6c\015" +
    "\uff6c\017\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035" +
    "\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\046\uff6c\050\uff6c" +
    "\052\uff6c\053\uff6c\001\002\000\004\050\103\001\002\000" +
    "\060\006\uff6d\015\uff6d\017\uff6d\021\uff6d\022\uff6d\023\uff6d" +
    "\024\uff6d\025\uff6d\026\uff6d\030\uff6d\031\uff6d\032\uff6d\033" +
    "\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d" +
    "\046\uff6d\050\uff6d\052\uff6d\053\uff6d\001\002\000\016\027" +
    "\056\030\051\031\044\042\060\047\055\060\045\001\002" +
    "\000\016\027\056\030\051\031\044\042\060\047\055\060" +
    "\045\001\002\000\016\027\056\030\051\031\044\042\060" +
    "\047\055\060\045\001\002\000\016\027\056\030\051\031" +
    "\044\042\060\047\055\060\045\001\002\000\016\027\056" +
    "\030\051\031\044\042\060\047\055\060\045\001\002\000" +
    "\016\027\056\030\051\031\044\042\060\047\055\060\045" +
    "\001\002\000\026\006\uff7e\015\uff7e\017\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\046\uff7e\050\uff7e\052\uff7e\053\uff7e\001\002" +
    "\000\026\006\uff80\015\uff80\017\uff80\021\uff80\022\uff80\023" +
    "\uff80\046\uff80\050\uff80\052\uff80\053\uff80\001\002\000\026" +
    "\006\uff81\015\uff81\017\uff81\021\uff81\022\uff81\023\uff81\046" +
    "\uff81\050\uff81\052\uff81\053\uff81\001\002\000\026\006\uff82" +
    "\015\uff82\017\uff82\021\uff82\022\uff82\023\uff82\046\uff82\050" +
    "\uff82\052\uff82\053\uff82\001\002\000\026\006\uff7d\015\uff7d" +
    "\017\uff7d\021\uff7d\022\uff7d\023\uff7d\046\uff7d\050\uff7d\052" +
    "\uff7d\053\uff7d\001\002\000\026\006\uff7f\015\uff7f\017\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\046\uff7f\050\uff7f\052\uff7f\053" +
    "\uff7f\001\002\000\016\027\056\030\051\031\044\042\060" +
    "\047\055\060\045\001\002\000\016\006\uff86\022\uff86\023" +
    "\uff86\050\uff86\052\uff86\053\uff86\001\002\000\016\006\uff88" +
    "\022\uff88\023\uff88\050\uff88\052\uff88\053\120\001\002\000" +
    "\014\006\uff8a\022\uff8a\023\uff8a\050\uff8a\052\uff8a\001\002" +
    "\000\016\006\uff87\022\uff87\023\uff87\050\uff87\052\uff87\053" +
    "\uff87\001\002\000\016\006\uff85\022\uff85\023\uff85\050\uff85" +
    "\052\uff85\053\uff85\001\002\000\060\006\uff71\015\uff71\017" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036" +
    "\uff71\037\uff71\040\uff71\041\uff71\046\uff71\050\uff71\052\uff71" +
    "\053\uff71\001\002\000\012\006\uff8e\022\uff8e\023\uff8e\052" +
    "\uff8e\001\002\000\060\006\uff70\015\uff70\017\uff70\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70" +
    "\040\uff70\041\uff70\046\uff70\050\uff70\052\uff70\053\uff70\001" +
    "\002\000\004\046\132\001\002\000\064\006\uff65\015\uff65" +
    "\017\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65" +
    "\036\uff65\037\uff65\040\uff65\041\uff65\043\uff65\045\uff65\046" +
    "\uff65\050\uff65\052\uff65\053\uff65\001\002\000\012\006\uffaa" +
    "\022\uffaa\023\uffaa\052\136\001\002\000\010\006\uffac\022" +
    "\uffac\023\uffac\001\002\000\012\006\uffa8\022\uffa8\023\uffa8" +
    "\052\uffa8\001\002\000\020\006\uffa6\016\017\020\023\022" +
    "\uffa6\023\uffa6\027\025\052\uffa6\001\002\000\012\006\uffa7" +
    "\022\uffa7\023\uffa7\052\uffa7\001\002\000\012\006\uffa9\022" +
    "\uffa9\023\uffa9\052\uffa9\001\002\000\004\021\142\001\002" +
    "\000\020\006\uff9d\016\uff9d\020\uff9d\022\uff9d\023\uff9d\027" +
    "\uff9d\052\uff9d\001\002\000\020\006\uffa6\016\017\020\023" +
    "\022\uffa6\023\uffa6\027\025\052\uffa6\001\002\000\010\006" +
    "\uff9a\022\145\023\uff9a\001\002\000\016\027\056\030\051" +
    "\031\044\042\060\047\055\060\045\001\002\000\006\006" +
    "\uff94\023\152\001\002\000\010\006\uff97\022\uff97\023\uff97" +
    "\001\002\000\010\006\uff99\022\145\023\uff99\001\002\000" +
    "\010\006\uff98\022\uff98\023\uff98\001\002\000\014\006\uffa6" +
    "\016\017\020\023\027\025\052\uffa6\001\002\000\004\006" +
    "\uff93\001\002\000\004\006\uff9c\001\002\000\004\006\156" +
    "\001\002\000\012\006\uff9b\022\uff9b\023\uff9b\052\uff9b\001" +
    "\002\000\004\006\uff92\001\002\000\004\021\161\001\002" +
    "\000\020\006\uff96\016\uff96\020\uff96\022\uff96\023\uff96\027" +
    "\uff96\052\uff96\001\002\000\020\006\uffa6\016\017\020\023" +
    "\022\uffa6\023\uffa6\027\025\052\uffa6\001\002\000\010\006" +
    "\uff95\022\uff95\023\uff95\001\002\000\016\027\056\030\051" +
    "\031\044\042\060\047\055\060\045\001\002\000\012\006" +
    "\uff84\022\uff84\023\uff84\052\uff84\001\002\000\004\017\167" +
    "\001\002\000\014\006\uffa0\016\uffa0\020\uffa0\027\uffa0\052" +
    "\uffa0\001\002\000\014\006\uffa6\016\017\020\023\027\025" +
    "\052\uffa6\001\002\000\004\006\uff9f\001\002\000\004\006" +
    "\173\001\002\000\012\006\uff9e\022\uff9e\023\uff9e\052\uff9e" +
    "\001\002\000\004\027\175\001\002\000\004\044\176\001" +
    "\002\000\004\002\000\001\002\000\016\005\ufff7\006\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\027\341\001\002\000\014\005" +
    "\ufff2\006\ufff2\010\202\011\ufff2\012\ufff2\001\002\000\012" +
    "\005\uffeb\006\uffeb\011\254\012\uffeb\001\002\000\014\005" +
    "\ufff0\006\ufff0\011\ufff0\012\ufff0\027\203\001\002\000\004" +
    "\040\210\001\002\000\014\005\uffef\006\uffef\011\uffef\012" +
    "\uffef\027\203\001\002\000\014\005\uffed\006\uffed\011\uffed" +
    "\012\uffed\027\uffed\001\002\000\012\005\ufff1\006\ufff1\011" +
    "\ufff1\012\ufff1\001\002\000\014\005\uffee\006\uffee\011\uffee" +
    "\012\uffee\027\uffee\001\002\000\014\013\212\014\220\027" +
    "\214\054\217\055\211\001\002\000\010\006\uffc4\050\uffc4" +
    "\052\uffc4\001\002\000\010\006\uffba\027\233\052\uffba\001" +
    "\002\000\004\052\230\001\002\000\010\006\uffc1\050\uffc1" +
    "\052\uffc1\001\002\000\010\006\uffc3\050\uffc3\052\uffc3\001" +
    "\002\000\010\006\uffc2\050\uffc2\052\uffc2\001\002\000\010" +
    "\006\uffc5\050\uffc5\052\uffc5\001\002\000\016\027\056\030" +
    "\051\031\044\042\060\047\055\060\045\001\002\000\004" +
    "\015\222\001\002\000\014\013\212\014\220\027\224\054" +
    "\227\055\223\001\002\000\010\006\uffb6\050\uffb6\052\uffb6" +
    "\001\002\000\010\006\uffb3\050\uffb3\052\uffb3\001\002\000" +
    "\010\006\uffb7\050\uffb7\052\uffb7\001\002\000\010\006\uffb4" +
    "\050\uffb4\052\uffb4\001\002\000\010\006\uffb5\050\uffb5\052" +
    "\uffb5\001\002\000\014\005\uffec\006\uffec\011\uffec\012\uffec" +
    "\027\uffec\001\002\000\004\051\252\001\002\000\006\006" +
    "\uffb9\052\uffb9\001\002\000\006\051\uffb1\053\244\001\002" +
    "\000\006\006\uffbf\052\240\001\002\000\006\006\uffbe\052" +
    "\240\001\002\000\006\006\uffbc\052\uffbc\001\002\000\004" +
    "\006\242\001\002\000\010\006\uffba\027\233\052\uffba\001" +
    "\002\000\006\006\uffbb\052\uffbb\001\002\000\010\006\uffc0" +
    "\050\uffc0\052\uffc0\001\002\000\006\006\uffbd\052\uffbd\001" +
    "\002\000\004\027\251\001\002\000\006\051\uffb0\053\244" +
    "\001\002\000\006\051\uffae\053\uffae\001\002\000\004\051" +
    "\uffb2\001\002\000\006\051\uffaf\053\uffaf\001\002\000\006" +
    "\051\uffad\053\uffad\001\002\000\014\013\212\014\220\027" +
    "\214\054\217\055\211\001\002\000\006\006\uffb8\052\uffb8" +
    "\001\002\000\012\005\uffe9\006\uffe9\012\uffe9\027\233\001" +
    "\002\000\010\005\uffe4\006\uffe4\012\256\001\002\000\004" +
    "\027\301\001\002\000\004\052\300\001\002\000\010\005" +
    "\uffe1\006\uffe1\012\uffe1\001\002\000\010\005\uffe3\006\uffe3" +
    "\012\256\001\002\000\006\005\ufffa\006\ufffa\001\002\000" +
    "\004\052\264\001\002\000\016\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\001\002\000\016\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\006" +
    "\005\uffde\006\uffde\001\002\000\006\005\272\006\uffdb\001" +
    "\002\000\004\006\uffda\001\002\000\004\006\275\001\002" +
    "\000\014\006\uffa6\016\017\020\023\027\025\052\uffa6\001" +
    "\002\000\004\052\uffdd\001\002\000\004\006\uffd9\001\002" +
    "\000\004\027\276\001\002\000\004\052\uffdc\001\002\000" +
    "\010\005\uffe2\006\uffe2\012\uffe2\001\002\000\010\005\uffe0" +
    "\006\uffe0\012\uffe0\001\002\000\014\011\305\027\uffc7\047" +
    "\310\050\uffd0\052\uffd7\001\002\000\004\050\uffcf\001\002" +
    "\000\004\052\uffd8\001\002\000\006\050\uffcd\052\324\001" +
    "\002\000\004\027\uffc6\001\002\000\004\050\322\001\002" +
    "\000\004\052\uffd6\001\002\000\010\011\uffd4\027\uffd4\050" +
    "\uffd4\001\002\000\004\027\233\001\002\000\004\052\uffd5" +
    "\001\002\000\004\051\314\001\002\000\014\013\212\014" +
    "\220\027\214\054\217\055\211\001\002\000\006\050\uffc8" +
    "\052\uffc8\001\002\000\010\011\305\027\uffc7\050\uffd0\001" +
    "\002\000\004\050\uffd3\001\002\000\004\050\321\001\002" +
    "\000\004\052\uffd2\001\002\000\004\052\uffd1\001\002\000" +
    "\006\050\uffcc\052\324\001\002\000\006\011\305\027\uffc7" +
    "\001\002\000\004\050\uffce\001\002\000\006\050\uffca\052" +
    "\uffca\001\002\000\006\050\uffc9\052\uffc9\001\002\000\006" +
    "\050\uffcb\052\uffcb\001\002\000\012\005\uffe8\006\uffe8\012" +
    "\uffe8\027\233\001\002\000\010\005\uffea\006\uffea\012\uffea" +
    "\001\002\000\012\005\uffe6\006\uffe6\012\uffe6\027\uffe6\001" +
    "\002\000\004\051\335\001\002\000\014\013\212\014\220" +
    "\027\214\054\217\055\211\001\002\000\004\052\337\001" +
    "\002\000\012\005\uffe5\006\uffe5\012\uffe5\027\uffe5\001\002" +
    "\000\012\005\uffe7\006\uffe7\012\uffe7\027\uffe7\001\002\000" +
    "\004\040\346\001\002\000\016\005\ufff6\006\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\027\341\001\002\000\014\005\ufff8\006" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\016\005\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\012\ufff4\027\ufff4\001\002\000" +
    "\016\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\027\ufff5" +
    "\001\002\000\016\027\056\030\051\031\044\042\060\047" +
    "\055\060\045\001\002\000\004\052\350\001\002\000\016" +
    "\005\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\027\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\011\120\010\001\001\000\004\005\177\001\001\000" +
    "\004\116\012\001\001\000\004\003\013\001\001\000\002" +
    "\001\001\000\004\117\015\001\001\000\022\057\030\063" +
    "\023\064\020\065\026\066\027\074\025\104\017\112\021" +
    "\001\001\000\016\105\165\106\052\107\056\110\046\111" +
    "\053\112\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\105\140\106\052\107\056\110" +
    "\046\111\053\112\045\001\001\000\010\060\133\061\132" +
    "\062\134\001\001\000\014\075\033\076\032\113\035\114" +
    "\036\115\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\105\130\106" +
    "\052\107\056\110\046\111\053\112\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\077\047\100\060\105" +
    "\051\106\052\107\056\110\046\111\053\112\045\001\001" +
    "\000\002\001\001\000\004\115\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\111\127\112\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\111\125\112\045\001\001\000\010\101\122\102\121\103" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\105\101\106\052\107\056\110\046\111\053\112\045\001" +
    "\001\000\010\113\035\114\036\115\037\001\001\000\002" +
    "\001\001\000\006\111\061\112\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\110\077\111\053\112\045" +
    "\001\001\000\010\110\076\111\053\112\045\001\001\000" +
    "\010\110\065\111\053\112\045\001\001\000\002\001\001" +
    "\000\006\111\075\112\045\001\001\000\006\111\074\112" +
    "\045\001\001\000\006\111\073\112\045\001\001\000\006" +
    "\111\072\112\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\106\116\107\056\110\046\111\053" +
    "\112\045\001\001\000\014\106\115\107\056\110\046\111" +
    "\053\112\045\001\001\000\014\106\114\107\056\110\046" +
    "\111\053\112\045\001\001\000\014\106\113\107\056\110" +
    "\046\111\053\112\045\001\001\000\014\106\112\107\056" +
    "\110\046\111\053\112\045\001\001\000\014\106\111\107" +
    "\056\110\046\111\053\112\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\105\124\106\052" +
    "\107\056\110\046\111\053\112\045\001\001\000\002\001" +
    "\001\000\004\103\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\063\136\064\020\065\026\066\027\074\025" +
    "\104\017\112\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\142\001\001\000\022" +
    "\057\143\063\023\064\020\065\026\066\027\074\025\104" +
    "\017\112\021\001\001\000\010\067\145\070\147\071\146" +
    "\001\001\000\016\105\157\106\052\107\056\110\046\111" +
    "\053\112\045\001\001\000\006\072\153\073\152\001\001" +
    "\000\002\001\001\000\004\071\150\001\001\000\002\001" +
    "\001\000\022\057\156\063\023\064\020\065\026\066\027" +
    "\074\025\104\017\112\021\001\001\000\002\001\001\000" +
    "\004\130\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\131\161\001" +
    "\001\000\022\057\162\063\023\064\020\065\026\066\027" +
    "\074\025\104\017\112\021\001\001\000\002\001\001\000" +
    "\016\105\164\106\052\107\056\110\046\111\053\112\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\125" +
    "\167\001\001\000\022\057\170\063\023\064\020\065\026" +
    "\066\027\074\025\104\017\112\021\001\001\000\004\126" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\342\007\341\010\343\001\001\000\004\011\200\001\001" +
    "\000\004\015\254\001\001\000\010\012\205\013\203\014" +
    "\204\001\001\000\002\001\001\000\004\014\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\212\044\214\052\215\001\001\000\002\001\001" +
    "\000\010\050\233\051\231\053\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\105\220\106\052\107\056\110" +
    "\046\111\053\112\045\001\001\000\002\001\001\000\006" +
    "\044\225\052\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\246\055\244\056\245\001\001\000\010\045\236" +
    "\046\234\047\235\001\001\000\004\047\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\240\051\231" +
    "\053\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\252\044\214\052\215\001\001" +
    "\000\002\001\001\000\012\016\331\017\330\020\332\053" +
    "\333\001\001\000\014\021\261\022\260\023\257\024\256" +
    "\030\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\276\024\256\030\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\264\001" +
    "\001\000\006\004\265\120\010\001\001\000\004\122\266" +
    "\001\001\000\010\025\272\026\270\027\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\057\273\063\023" +
    "\064\020\065\026\066\027\074\025\104\017\112\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\302\032\306\033\311\034\305\035\301\041\303" +
    "\042\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\324\037\322\040\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\123\315\001" +
    "\001\000\004\053\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\314\044\214\052\215\001\001\000" +
    "\002\001\001\000\012\034\316\035\301\041\303\042\310" +
    "\001\001\000\004\124\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\327\001\001" +
    "\000\006\041\326\042\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\337\053\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\335\044\214\052\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\105" +
    "\346\106\052\107\056\110\046\111\053\112\045\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    OberonScanner.init(); 
    graph.addProcedure("write", "write");
    graph.addProcedure("read", "read");
    graph.addProcedure("writeln", "writeLn");
    func_ali.put("write", "write");
    func_ali.put("read", "read");
    func_ali.put("writeln", "writeln");     
    HashMap<String, Variable> para = new HashMap<>();
    para.put("something_1", new Variable(IdType.INTEGER));
    Variable rw = new Variable (IdType.PROCEDURE, para);
	
	HashMap<String, Variable> para_2 = new HashMap<>();
	Variable wln = new Variable (IdType.PROCEDURE, para_2);
	
	HashMap<String, Variable> topMap = new HashMap<>();
	topMap.put("write", rw);
	topMap.put("read", rw);
	topMap.put("writeln", wln);
	idStack.push(topMap);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return getScanner().next_token(); 

    }


    public CallGraph graph = new CallGraph();
    
    public Stack<HashMap<String, Variable>> idStack = new Stack<>();
    public HashMap<String, String> func_ali = new HashMap<>();
    public HashMap<String, String> edge = new HashMap<>();
    public String temp;
    public int index = 0;
    public HashMap<String, Variable> temp_head = new HashMap<>();
    int fun_count = 0;
    HashMap<String, Integer> call_count = new HashMap<>();
     public void addCallSite(String site, HashMap<String, String> callProc){
        Iterator<Entry<String, String>> iter = callProc.entrySet().iterator(); 
        while (iter.hasNext()) { 
            Entry<String, String> entry = iter.next();
            graph.addCallSite(entry.getKey(), site, entry.getValue());
            String id = new String();
            for(int i = entry.getKey().length() -1; i >= 0; i--) {
                if(Character.isDigit(entry.getKey().charAt(i))) {
                    continue;
                }
                id = entry.getKey().substring(0, i);
                break;
            }
            edge.put(entry.getKey(),id);
        } 
    }
    public void draw(){
        Iterator<Entry<String, String>> iter = edge.entrySet().iterator();
        while (iter.hasNext()) {
            Entry<String, String> entry = iter.next();
            try {
                graph.addEdge(entry.getKey(),func_ali.get(entry.getValue()));
            } catch (SourceNotFoundException
                    | TargetNotFoundException e) {
                e.printStackTrace();
            }
        } 
        graph.show();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // array_selector_key ::= LSQBRACKET expression RSQBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_selector_key",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // array_selector_one ::= array_selector_key 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_selector_one",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // array_selector_one ::= array_selector_one array_selector_key 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_selector_one",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // array_selector ::= array_selector_one 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_selector",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // array_selector ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_selector",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // selector ::= IDENTIFIER array_selector 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int array_selectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_selectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object array_select = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        throw new IllegalIdentifierException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = var;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // selector ::= IDENTIFIER DOT IDENTIFIER 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sub_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sub_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sub_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        throw new IllegalIdentifierException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    HashMap<String, Variable> record = (HashMap<String, Variable>)var.getValue();
    Variable type = record.get(sub_id);
    if(type == null){
        throw new IllegalIdentifierException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = type;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // factor ::= LPARENTHESE RPARENTHESE 
            {
              Variable RESULT =null;
		
   if(true){
		throw new MissingOperandException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // factor ::= LPARENTHESE expression RPARENTHESE 
            {
              Variable RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable ex = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = ex;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // factor ::= selector 
            {
              Variable RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sec = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // factor ::= NOT factor 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(fac.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Boolean)fac.getValue();
    RESULT = new Variable(IdType.BOOLEAN, !res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // factor ::= MINUS factor 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(fac.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)fac.getValue();
    RESULT = new Variable(IdType.INTEGER, -res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // factor ::= ADD factor 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(fac.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = fac;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // factor ::= NUMBER 
            {
              Variable RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Variable(IdType.INTEGER, num);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // term ::= factor 
            {
              Variable RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fac;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // term ::= term AND factor 
            {
              Variable RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(te.getType() != IdType.BOOLEAN || fac.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Boolean)te.getValue() && (Boolean)fac.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // term ::= term MOD factor 
            {
              Variable RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(te.getType() != IdType.INTEGER || fac.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)te.getValue() % (Integer)fac.getValue();
    RESULT = new Variable(IdType.INTEGER, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // term ::= term DIV factor 
            {
              Variable RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(te.getType() != IdType.INTEGER || fac.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    } else if((Integer)fac.getValue() == 0){
        throw new DivideByZeroException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)te.getValue() / (Integer)fac.getValue();
    RESULT = new Variable(IdType.INTEGER, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // term ::= term MUL factor 
            {
              Variable RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable fac = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(te.getType() != IdType.INTEGER || fac.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)te.getValue() * (Integer)fac.getValue();
    RESULT = new Variable(IdType.INTEGER, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= term 
            {
              Variable RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = te;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= expr OR term 
            {
              Variable RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable ex = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(ex.getType() != IdType.BOOLEAN || te.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Boolean)ex.getValue() || (Boolean)te.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= expr MINUS term 
            {
              Variable RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable ex = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(ex.getType() != IdType.INTEGER || te.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)ex.getValue() - (Integer)te.getValue();
    RESULT = new Variable(IdType.INTEGER, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= expr ADD term 
            {
              Variable RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable ex = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable te = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(ex.getType() != IdType.INTEGER || te.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Integer res = (Integer)ex.getValue() + (Integer)te.getValue();
    RESULT = new Variable(IdType.INTEGER, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // simple_expression ::= expr 
            {
              Variable RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable ex = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = ex;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= simple_expression BIGEQ simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() >= (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= simple_expression BIG simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() > (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= simple_expression LESSEQ simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() <= (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= simple_expression LESS simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() < (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= simple_expression NOTEQ simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() != (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= simple_expression EQUAL simple_expression 
            {
              Variable RESULT =null;
		int sim_expr_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim_expr_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sim_expr_1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim_expr_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim_expr_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable sim_expr_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sim_expr_1.getType() != IdType.INTEGER || sim_expr_2.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    Boolean res = (Integer)sim_expr_1.getValue() == (Integer)sim_expr_2.getValue();
    RESULT = new Variable(IdType.BOOLEAN, res);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= simple_expression 
            {
              Variable RESULT =null;
		int simple_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simple_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable simple_expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = simple_expr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assignment ::= selector ASSIGN expression 
            {
              Object RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable sec = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sec.getType() != expr.getType()){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // actual_parameters_key ::= COMMA expression 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = expr;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_key",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // actual_parameters_four ::= actual_parameters_key 
            {
              ArrayList<Variable> RESULT =null;
		int para_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable para_key_2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<Variable> para = new ArrayList<>();
    para.add(para_key_2);
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_four",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // actual_parameters_four ::= actual_parameters_four actual_parameters_key 
            {
              ArrayList<Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Variable> para_four = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable para_key = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    para_four.add(para_key);
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_four",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // actual_parameters_three ::= actual_parameters_four 
            {
              ArrayList<Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_four = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_three",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // actual_parameters_three ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_three",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // actual_parameters_two ::= expression actual_parameters_three 
            {
              ArrayList<Variable> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_three = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<Variable> para = new ArrayList<>();
    para.add(expr);
    para.addAll(para_three);
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_two",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // actual_parameters_one ::= actual_parameters_two 
            {
              ArrayList<Variable> RESULT =null;
		int para_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> para_two = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_one",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // actual_parameters_one ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters_one",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // actual_parameters ::= LPARENTHESE actual_parameters_one 
            {
              ArrayList<Variable> RESULT =null;
		
	if(true){
		throw new MissingRightParenthesisException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // actual_parameters ::= LPARENTHESE actual_parameters_one RPARENTHESE 
            {
              ArrayList<Variable> RESULT =null;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Variable> para_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // procedure_call_one ::= actual_parameters 
            {
              ArrayList<Variable> RESULT =null;
		int act_paraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int act_pararight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> act_para = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = act_para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_one",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // procedure_call_one ::= 
            {
              ArrayList<Variable> RESULT =null;
		
    ArrayList<Variable> para = new ArrayList<>();
    RESULT = para;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call_one",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // procedure_call ::= IDENTIFIER procedure_call_one 
            {
              HashMap<String,String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pro_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pro_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Variable> pro_one = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    HashMap<String, Variable> topMap = parser.idStack.peek();
    HashMap<String, Variable> parameter = new HashMap<>();
    Variable procedure = topMap.get(id);
    if(procedure == null){
    	throw new IllegalIdentifierException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    } else {
    	parameter = (HashMap<String, Variable>) procedure.getValue();
    	if(parameter.entrySet().size() != pro_one.size()){
    		throw new ParameterMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    	}

    	Iterator<Entry<String, Variable>> iter = parameter.entrySet().iterator(); 
    	while (iter.hasNext()) { 
        	Entry<String, Variable> entry = iter.next();
        	Integer index = Integer.parseInt((entry.getKey().split("_"))[1]);
        	if(pro_one.get(index-1).getType() != entry.getValue().getType()){
				throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
     		}
    	}
    }
    String para = new String(id+"(");
    if(pro_one.size() != 0){
    	para += pro_one.get(0).getValue().toString();
    	for(int i = 1 ; i < pro_one.size(); i++){
        	para += ", " + pro_one.get(i).getValue().toString();
    	}
    }
    para += ")";
    int index = 0;
    if(parser.call_count.get(id) != null){
        index = parser.call_count.get(id);
        parser.call_count.put(id, index+1);
    } else {
        parser.call_count.put(id, 1);
    }
    curMap.put(id+"_"+index, para);
    // System.out.println("Para:"+curMap.toString());
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_statement_else_one ::= ELSE statement_sequence 
            {
              HashMap<String,String> RESULT =null;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else_one",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_statement_else ::= if_statement_else_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_statement_else ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<String, String>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_else",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_statement_elseif_key ::= ELSIF expression THEN NT$11 statement_sequence 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_key",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$11 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_statement_elseif_one ::= if_statement_elseif_key 
            {
              HashMap<String,String> RESULT =null;
		int state_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_key_2 = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_key_2;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_one",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_statement_elseif_one ::= if_statement_elseif_one if_statement_elseif_key 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    state_one.putAll(state_key);
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif_one",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_statement_elseif ::= if_statement_elseif_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_statement_elseif ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<String, String>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_elseif",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_statement ::= IF expression THEN NT$9 statement_sequence if_statement_elseif if_statement_else NT$10 END 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int state_elsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int state_elsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,String> state_elsif = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_else = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$10 ::= 
            {
              HashMap<String,String> RESULT =(HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int state_elsifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int state_elsifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state_elsif = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_else = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    HashMap<String, String> curMap = new HashMap<String, String>();
    curMap.putAll(state_seq);
    curMap.putAll(state_elsif);
    curMap.putAll(state_else);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$9 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // while_statement ::= WHILE expression DO NT$7 statement_sequence NT$8 END 
            {
              HashMap<String,String> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$8 ::= 
            {
              HashMap<String,String> RESULT =(HashMap<String,String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$7 ::= 
            {
              HashMap<String,String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    if(expr.getType() != IdType.BOOLEAN){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement_one ::= while_statement 
            {
              HashMap<String,String> RESULT =null;
		int while_stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int while_stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> while_state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(while_state);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement_one ::= if_statement 
            {
              HashMap<String,String> RESULT =null;
		int if_stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> if_state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(if_state);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement_one ::= procedure_call 
            {
              HashMap<String,String> RESULT =null;
		int pro_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pro_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> pro_call = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, String> curMap = new HashMap<>();
    curMap.putAll(pro_call);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement_one ::= assignment 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_one",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= statement_one 
            {
              HashMap<String,String> RESULT =null;
		int state_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement_sequence_key ::= SEMI statement 
            {
              HashMap<String,String> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_key",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement_sequence_two ::= statement_sequence_key 
            {
              HashMap<String,String> RESULT =null;
		int seq_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_key_2 = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = seq_key_2;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_two",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement_sequence_two ::= statement_sequence_two statement_sequence_key 
            {
              HashMap<String,String> RESULT =null;
		int seq_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seq_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> seq_two = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seq_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    seq_two.putAll(seq_key);
    RESULT = seq_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_two",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement_sequence_one ::= statement_sequence_two 
            {
              HashMap<String,String> RESULT =null;
		int seq_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_two = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = seq_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_one",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement_sequence_one ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence_one",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement_sequence ::= statement statement_sequence_one 
            {
              HashMap<String,String> RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,String> state = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seq_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seq_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> seq_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    state.putAll(seq_one);
    RESULT = state;
    // System.out.println("Statement:" + state.toString());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // identifier_list_key ::= COMMA IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = id;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_key",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier_list_two ::= identifier_list_key 
            {
              ArrayList<String> RESULT =null;
		int list_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list_key_2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<String> idList = new ArrayList<>();
    idList.add(list_key_2);
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_two",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // identifier_list_two ::= identifier_list_two identifier_list_key 
            {
              ArrayList<String> RESULT =null;
		int list_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> list_two = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list_key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    list_two.add(list_key);
    RESULT = list_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_two",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // identifier_list_one ::= identifier_list_two 
            {
              ArrayList<String> RESULT =null;
		int list_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> list_two = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = list_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_one",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // identifier_list_one ::= 
            {
              ArrayList<String> RESULT =null;
		
    ArrayList<String> idList = new ArrayList<>();
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_one",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // identifier_list ::= IDENTIFIER identifier_list_one 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> list_one = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<String> idList = new ArrayList<>();
    idList.add(id);
    idList.addAll(list_one);
    // System.out.println(idList.toString());
    RESULT = idList;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_type ::= ARRAY expression OF IDENTIFIER 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        throw new IllegalTypeException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    } else if(var.getType() == IdType.PROCEDURE){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    } else {
        RESULT = var;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // array_type ::= ARRAY expression OF record_type 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int record_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int record_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> record_tp = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(expr.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = new Variable(IdType.RECORD, record_tp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // array_type ::= ARRAY expression OF BOOLEAN 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(expr.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = new Variable(IdType.BOOLEAN);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // array_type ::= ARRAY expression OF INTEGER 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(expr.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = new Variable(IdType.INTEGER);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // array_type ::= ARRAY expression OF array_type 
            {
              Variable RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int array_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable array_tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(expr.getType() != IdType.INTEGER){
        throw new TypeMismatchedException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    RESULT = array_tp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // field_list_key ::= identifier_list COLON type 
            {
              HashMap<String,Variable> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    for(int i = 0;i < id_list.size(); i++){
        curMap.put(id_list.get(i), tp);
    }
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_key",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // field_list ::= field_list_key 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fie_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fie_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fie_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // field_list ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // record_type_key ::= SEMI field_list 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fie_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fie_list = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fie_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_key",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // record_type_two ::= record_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = rec_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_two",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // record_type_two ::= record_type_two record_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rec_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> rec_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rec_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    rec_two.putAll(rec_key);
    RESULT = rec_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_two",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // record_type_one ::= record_type_two 
            {
              HashMap<String,Variable> RESULT =null;
		int rec_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rec_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> rec_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = rec_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_one",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // record_type_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type_one",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // record_type ::= RECORD field_list record_type_one END 
            {
              HashMap<String,Variable> RESULT =null;
		int fie_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fie_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> fie_list = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> rec_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    fie_list.putAll(rec_one);
    RESULT = fie_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= IDENTIFIER 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.peek();
    Variable var = curMap.get(id);
    if(var == null){
        /*Throw exception*/
    } else if(var.getType() == IdType.PROCEDURE){
        /*Throw exception*/
    } else {
        RESULT = var;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= array_type 
            {
              Variable RESULT =null;
		int array_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int array_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable array_tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = array_tp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= record_type 
            {
              Variable RESULT =null;
		int record_tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int record_tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> record_tp = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Variable(IdType.RECORD, record_tp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= INTEGER 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.INTEGER);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= BOOLEAN 
            {
              Variable RESULT =null;
		
    RESULT = new Variable(IdType.BOOLEAN);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fp_section_one ::= VAR 
            {
              HashMap<String,Variable> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_one",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fp_section_one ::= 
            {
              HashMap<String,Variable> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section_one",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fp_section ::= fp_section_one identifier_list COLON type 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_sec_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fp_sec_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> fp_sec_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    for(int i = 0;i < id_list.size(); i++){
        curMap.put(id_list.get(i)+"_"+(++parser.index), tp);
    }
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameters_key ::= SEMI fp_section 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fp_secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> fp_sec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = fp_sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_key",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formal_parameters_four ::= formal_parameters_key 
            {
              HashMap<String,Variable> RESULT =null;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_four",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formal_parameters_four ::= formal_parameters_four formal_parameters_key 
            {
              HashMap<String,Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> para_four = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    para_four.putAll(para_key);
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_four",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // formal_parameters_three ::= formal_parameters_four 
            {
              HashMap<String,Variable> RESULT =null;
		int para_fourleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_fourright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_four = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_four;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_three",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formal_parameters_three ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_three",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formal_parameters_two ::= fp_section formal_parameters_three 
            {
              HashMap<String,Variable> RESULT =null;
		int fp_secleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fp_secright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> fp_sec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_threeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_threeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_three = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    fp_sec.putAll(para_three);
    RESULT = fp_sec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_two",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formal_parameters_one ::= formal_parameters_two 
            {
              HashMap<String,Variable> RESULT =null;
		int para_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = para_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_one",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formal_parameters_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters_one",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formal_parameters ::= formal_parameters_one RPARENTHESE 
            {
              HashMap<String,Variable> RESULT =null;
		
	if(true){
		throw new MissingLeftParenthesisException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formal_parameters ::= LPARENTHESE NT$5 formal_parameters_one NT$6 RPARENTHESE 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> para_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	parser.index = 0;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$6 ::= 
            {
              HashMap<String,Variable> RESULT =(HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int para_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int para_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> para_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = para_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$5 ::= 
            {
              HashMap<String,Variable> RESULT =null;

	parser.index = 0;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_heading_key ::= formal_parameters 
            {
              HashMap<String,Variable> RESULT =null;
		int formalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> formal = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = formal;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_key",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure_heading_one ::= procedure_heading_key 
            {
              HashMap<String,Variable> RESULT =null;
		int heading_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int heading_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> heading_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = heading_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_one",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure_heading_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading_one",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure_heading ::= PROCEDURE IDENTIFIER procedure_heading_one 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int heading_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int heading_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> heading_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.put(id, new Variable(IdType.PROCEDURE, heading_one));
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure_body_key ::= BEGIN statement_sequence 
            {
              HashMap<String,String> RESULT =null;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = state_seq;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_key",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure_body_one ::= procedure_body_key 
            {
              HashMap<String,String> RESULT =null;
		int body_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int body_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> body_key = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = body_key;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_one",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_body_one ::= 
            {
              HashMap<String,String> RESULT =null;
		
    HashMap<String, String> curMap = new HashMap<>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body_one",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_body ::= procedure_body_one END IDENTIFIER 
            {
              String RESULT =null;
		int body_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int body_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,String> body_one = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.addCallSite(id, body_one);
    parser.idStack.pop();
    RESULT = id;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_declaration ::= procedure_heading SEMI NT$3 declarations NT$4 procedure_body 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if(!parser.temp.equals(body)){
		throw new MismatchedBlockIdException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              HashMap<String,Variable> RESULT =(HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

	HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> var = (HashMap<String, Variable>) parser.temp_head.get((parser.temp)).getValue();
	Iterator<Entry<String, Variable>> iter = var.entrySet().iterator(); 
    while (iter.hasNext()) { 
  	 	Entry<String, Variable> entry = iter.next();
  	 	String id = (entry.getKey().split("_"))[0];
   		curMap.put(id, entry.getValue());
  	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              HashMap<String,Variable> RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> head = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    HashMap<String, Variable> topMap = parser.idStack.peek();
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    Iterator<Entry<String, Variable>> iter = head.entrySet().iterator(); 
    String id = new String();
    while (iter.hasNext()) { 
        Entry<String, Variable> entry = iter.next();
        if(entry.getValue().getType() == IdType.PROCEDURE){
            id = entry.getKey();
            curMap.put(entry.getKey(), entry.getValue());
            parser.func_ali.put(entry.getKey(), ("func" + (++parser.fun_count)));
            parser.graph.addProcedure(("func" + parser.fun_count), entry.getKey());
            break;
        }
    } 
    if(curMap.isEmpty()){
        /*Throw exception*/
    }
    if(topMap.get(id) != null){
	throw new IdentifierConflictException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    } else {
	topMap.putAll(curMap);
    }
    parser.temp_head = head;
    parser.temp = id;
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarations_procedure_key ::= procedure_declaration SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int pro_decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pro_decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> pro_dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = pro_dec;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_key",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarations_procedure_one ::= declarations_procedure_key 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(procedure_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarations_procedure_one ::= declarations_procedure_one declarations_procedure_key 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedure_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> procedure_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procedure_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    procedure_one.putAll(procedure_key);
    RESULT = procedure_one;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure_one",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declarations_procedure ::= declarations_procedure_one 
            {
              HashMap<String,Variable> RESULT =null;
		int procedure_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedure_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> procedure_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	curMap.putAll(procedure_one);
	// System.out.println("Procedure:"+curMap.toString());
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarations_procedure ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_procedure",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarations_var_key ::= identifier_list COLON type SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> id_list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
    for(int i = 0; i < id_list.size(); i++){
    	if(curMap.get(id_list.get(i)) != null){
			throw new IdentifierConflictException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
		}
		curMap.put(id_list.get(i), tp);
        item.put(id_list.get(i), tp);
    }
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_key",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarations_var_two ::= declarations_var_key 
            {
              HashMap<String,Variable> RESULT =null;
		int var_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(var_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_two",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations_var_two ::= declarations_var_two declarations_var_key 
            {
              HashMap<String,Variable> RESULT =null;
		int var_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> var_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int var_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    var_two.putAll(var_key);
    RESULT = var_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_two",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations_var_one ::= declarations_var_two 
            {
              HashMap<String,Variable> RESULT =null;
		int var_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	curMap.putAll(var_two);
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_one",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_var_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var_one",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations_var ::= VAR declarations_var_one 
            {
              HashMap<String,Variable> RESULT =null;
		int var_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> var_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	curMap.putAll(var_one);
	// System.out.println("Var:"+curMap.toString());
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations_var ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations_type_key ::= IDENTIFIER EQUAL type SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable tp = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
    item.put(id, tp);
    if(curMap.get(id) != null){
		throw new IdentifierConflictException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	} else {
		curMap.putAll(item);
	}
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_key",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations_type_two ::= declarations_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int type_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(type_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_two",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_type_two ::= declarations_type_two declarations_type_key 
            {
              HashMap<String,Variable> RESULT =null;
		int type_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int type_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> type_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int type_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    type_two.putAll(type_key);
    RESULT = type_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_two",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_type_one ::= declarations_type_two 
            {
              HashMap<String,Variable> RESULT =null;
		int type_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	curMap.putAll(type_two);
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_one",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_type_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
	HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type_one",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarations_type ::= TYPE declarations_type_one 
            {
              HashMap<String,Variable> RESULT =null;
		int type_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> type_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	curMap.putAll(type_one);
	// System.out.println("Type:"+curMap.toString());
	RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarations_type ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarations_const_key ::= IDENTIFIER EQUAL expression SEMI 
            {
              HashMap<String,Variable> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable expr = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    HashMap<String, Variable> curMap = parser.idStack.peek();
    HashMap<String, Variable> item = new HashMap<>();
    item.put(id, new Variable(IdType.INTEGER, expr));
    if(curMap.get(id) != null){
		throw new IdentifierConflictException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
	} else {
		curMap.putAll(item);
	}
    RESULT = item;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_key",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_const_two ::= declarations_const_key 
            {
              HashMap<String,Variable> RESULT =null;
		int const_key_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_key_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_key_2 = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    curMap.putAll(const_key_2);
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_two",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations_const_two ::= declarations_const_two declarations_const_key 
            {
              HashMap<String,Variable> RESULT =null;
		int const_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int const_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> const_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int const_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_key = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    const_two.putAll(const_key);
    RESULT = const_two;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_two",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations_const_one ::= declarations_const_two 
            {
              HashMap<String,Variable> RESULT =null;
		int const_twoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_tworight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_two = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
       curMap.putAll(const_two);
       RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_one",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations_const_one ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
       HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const_one",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations_const ::= CONST declarations_const_one 
            {
              HashMap<String,Variable> RESULT =null;
		int const_oneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_oneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> const_one = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
       curMap.putAll(const_one);
       RESULT = curMap;
       // System.out.println("Const:"+curMap.toString());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations_const ::= 
            {
              HashMap<String,Variable> RESULT =null;
		
    HashMap<String, Variable> curMap = new HashMap<String, Variable>();
    RESULT = curMap;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_const",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= NT$2 declarations_const declarations_type declarations_var declarations_procedure 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int de_constleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int de_constright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HashMap<String,Variable> de_const = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int de_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int de_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Variable> de_type = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int de_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int de_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> de_var = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int de_procedureleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int de_procedureright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> de_procedure = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Variable> curMap = parser.idStack.pop();
    HashMap<String, Variable> topMap = new HashMap<String, Variable>();
    if(!parser.idStack.empty()){
    	topMap = parser.idStack.peek();
    	Iterator<Entry<String, Variable>> iter = topMap.entrySet().iterator(); 
    	while (iter.hasNext()) { 
        	Entry<String, Variable> entry = iter.next();
        	if(curMap.get(entry.getKey()) == null){
				curMap.put(entry.getKey(), entry.getValue());
     		}
    	}
    }
    parser.idStack.push(curMap);
    // System.out.println(curMap.toString());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              HashMap<String,Variable> RESULT =null;

	HashMap<String, Variable> curMap = new HashMap<String, Variable>();
	HashMap<String, Variable> topMap = new HashMap<String, Variable>();
	if(!parser.idStack.empty()){
		topMap = parser.idStack.peek();
		Iterator<Entry<String, Variable>> iter = topMap.entrySet().iterator(); 
    	while (iter.hasNext()) { 
        	Entry<String, Variable> entry = iter.next();
        	if(entry.getValue().getType() == IdType.PROCEDURE){
				curMap.put(entry.getKey(), entry.getValue());
     		}
    	}
	}
    parser.idStack.push(curMap);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= BEGIN NT$1 statement_sequence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int state_seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int state_seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,String> state_seq = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.addCallSite("main", state_seq);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;

    parser.graph.addProcedure("main", "main");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Variable> start_val = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // module ::= MODULE IDENTIFIER SEMI declarations NT$0 main END IDENTIFIER DOT 
            {
              HashMap<String,Variable> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (HashMap<String,Variable>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		HashMap<String,Variable> dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!id2.equals(id1)){
        throw new MismatchedBlockIdException(((OberonScanner) parser.getScanner()).getLine(), ((OberonScanner) parser.getScanner()).getColumn());
    }
    parser.idStack.pop();
    System.out.println("Parsering Succeed! Show Call Graph...");
    // System.out.println(parser.edge);
    parser.draw(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              HashMap<String,Variable> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Variable> dec = (HashMap<String,Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    System.out.println("Module Name is " + id1); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

